kind: DataSetConfiguration
apiVersion: client.uor-framework.io/v1alpha1
collection:
  files:
  - file: '*.whl'
    attributes:
      pyindex: true
  - file: '*.tar.gz'
    attributes:
      pyindex: true
  - file: bottle/bottle-0.8.4.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.8.4
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a build-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.10.4.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.4
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.10.8.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.8
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.5.4.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.5.4
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple mirco-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.6.0.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.6.0
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.6.4.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.6.4
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.8.2.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.8.2
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a build-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.9.8.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.9.8
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.12.6.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.6
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.12.10-py2-none-any.whl
    attributes:
      metadata_version: '2.0'
      name: bottle
      version: 0.12.10
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)



        '
  - file: bottle/bottle-0.12.13.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.13
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.6.5.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.6.5
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.12.2.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.2
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.12.9.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.9
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.12.11.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.11
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.12.19.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.19
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
  - file: bottle/bottle-0.4.13.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.13
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple mirco-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.12.7.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.7
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.12.3.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.3
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.9.4.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.9.4
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.10.3.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.3
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.12.1.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.1
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.12.16.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.16
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
  - file: bottle/bottle-0.4.3.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.3
      platforms: '["UNKNOWN"]'
      summary: WSGI micro web framework + templates
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.9.3.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.9.3
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.4.12.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.12
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple mirco-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.11.3.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.11.3
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2012, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.5.8.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.5.8
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.4.10.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.10
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple mirco-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.12.12.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.12
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.12.20-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.20
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)

        '
  - file: bottle/bottle-0.12.22-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.22
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)

        '
  - file: bottle/bottle-0.8.5.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.8.5
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a build-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.10.5.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.5
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.10.9.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.9
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.11.1.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.11.1
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2012, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.8.3.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.8.3
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a build-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.9.5.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.9.5
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.10.1.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.1
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.12.14.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.14
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.4.4.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.4
      platforms: '["UNKNOWN"]'
      summary: WSGI micro web framework + templates
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.4.9.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.9
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple mirco-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.12.21.tar.gz
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.21
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)

        '
  - file: bottle/bottle-0.10.12.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.12
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.11.4.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.11.4
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2012, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.9.1.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.9.1
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.10.6.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.6
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.10.10.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.10
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.5.7.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.5.7
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.6.2.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.6.2
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.6.6.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.6.6
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.9.6.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.9.6
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.4.8.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.8
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple mirco-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.11.6-py2.py3-none-any.whl
    attributes:
      metadata_version: '2.0'
      name: bottle
      version: 0.11.6
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2012, Marcel Hellkamp.

        License: MIT (see LICENSE for details)



        '
  - file: bottle/bottle-0.12.8.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.8
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.12.11-py2.py3-none-any.whl
    attributes:
      metadata_version: '2.0'
      name: bottle
      version: 0.12.11
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)



        '
  - file: bottle/bottle-0.5.3.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.5.3
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple mirco-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.6.3.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.6.3
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.8.1.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.8.1
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a build-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.12.18-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.18
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)



        '
  - file: bottle/bottle-0.12.10.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.10
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.12.18.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.18
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
  - file: bottle/bottle-0.12.20.tar.gz
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.20
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)

        '
  - file: bottle/bottle-0.6.1.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.6.1
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.4.11.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.11
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple mirco-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.12.5.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.5
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.12.23.tar.gz
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.23
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)

        '
  - file: bottle/bottle-0.11.5.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.11.5
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2012, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.12.16-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.16
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)



        '
  - file: bottle/bottle-0.11.6.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.11.6
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2012, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.12.14-py2-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.14
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)



        '
  - file: bottle/bottle-0.12.17.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.17
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
  - file: bottle/bottle-0.4.6.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.6
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle supports request dispatching (Routes), Templates, key/value
        Databases, a build-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.12.15.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.15
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.5.6.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.5.6
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://bottle.paws.de/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.12.4.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.12.4
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2013, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
  - file: bottle/bottle-0.11.2.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.11.2
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2012, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.10.2.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.2
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.12.19-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.19
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)



        '
  - file: bottle/bottle-0.12.21-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.21
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)

        '
  - file: bottle/bottle-0.12.23-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.23
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)

        '
  - file: bottle/bottle-0.9.2.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.9.2
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.10.7.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.7
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.10.11.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.10.11
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.6", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.12.15-py2-none-any.whl
    attributes:
      metadata_version: '2.0'
      name: bottle
      version: 0.12.15
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3"]'
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)



        '
  - file: bottle/bottle-0.9.7.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.9.7
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple micro-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and template engines. All in a single file and with no dependencies other
        than the Python Standard Library.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.11.7.tar.gz
    attributes:
      metadata_version: '1.1'
      name: bottle
      version: 0.11.7
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: 'Bottle is a fast and simple micro-framework for small web applications.
        It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2012, Marcel Hellkamp.

        License: MIT (see LICENSE for details)'
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3"]'
  - file: bottle/bottle-0.12.17-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.17
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)



        '
  - file: bottle/bottle-0.4.7.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.7
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple mirco-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.4.14.tar.gz
    attributes:
      metadata_version: '1.0'
      name: bottle
      version: 0.4.14
      platforms: '["UNKNOWN"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      description: Bottle is a fast and simple mirco-framework for small web-applications.
        It offers request dispatching (Routes) with url parameter support, Templates,
        key/value Databases, a build-in HTTP Server and adapters for many third party
        WSGI/HTTP-server and template engines. All in a single file and with no dependencies
        other than the Python Standard Library.
      home_page: http://github.com/defnull/bottle
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
  - file: bottle/bottle-0.12.22.tar.gz
    attributes:
      metadata_version: '2.1'
      name: bottle
      version: 0.12.22
      platforms: '["any"]'
      summary: Fast and simple WSGI-framework for small web-applications.
      home_page: http://bottlepy.org/
      author: Marcel Hellkamp
      author_email: marc@gsites.de
      license: MIT
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Topic :: Internet :: WWW/HTTP ::
        Dynamic Content :: CGI Tools/Libraries", "Topic :: Internet :: WWW/HTTP ::
        HTTP Servers", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Internet
        :: WWW/HTTP :: WSGI :: Application", "Topic :: Internet :: WWW/HTTP :: WSGI
        :: Middleware", "Topic :: Internet :: WWW/HTTP :: WSGI :: Server", "Topic
        :: Software Development :: Libraries :: Application Frameworks", "Programming
        Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming
        Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"]'
      description: '

        Bottle is a fast and simple micro-framework for small web applications. It

        offers request dispatching (Routes) with url parameter support, templates,

        a built-in HTTP Server and adapters for many third party WSGI/HTTP-server
        and

        template engines - all in a single file and with no dependencies other than
        the

        Python Standard Library.


        Homepage and documentation: http://bottlepy.org/


        Copyright (c) 2016, Marcel Hellkamp.

        License: MIT (see LICENSE for details)

        '
  - file: isodate/isodate-0.4.3.tar.gz
    attributes:
      metadata_version: '1.0'
      name: isodate
      version: 0.4.3
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: 'ISO 8601 date/time parser

        =========================


        This module implements ISO 8601 date, time and duration parsing.

        The implementation follows ISO8601:2004 standard, and implements only

        date/time representations mentioned in the standard. If something is not

        mentioned there, then it is treated as non existent, and not as an allowed

        option.


        For instance, ISO8601:2004 never mentions 2 digit years. So, it is not

        intended by this module to support 2 digit years. (while it may still

        be valid as ISO date, because it is not explicitly forbidden.)

        Another example is, when no time zone information is given for a time,

        then it should be interpreted as local time, and not UTC.


        As this module maps ISO 8601 dates/times to standard Python data types, like

        *date*, *time*, *datetime* and *timedelta*, it is not possible to convert

        all possible ISO 8601 dates/times. For instance, dates before 0001-01-01 are

        not allowed by the Python *date* and *datetime* classes. Additionally

        fractional seconds are limited to microseconds. That means if the parser finds

        for instance nanoseconds it will round it to microseconds.


        Documentation

        -------------


        Currently there are four parsing methods available.

        * parse_time:

        parses an ISO 8601 time string into a *time* object

        * parse_date:

        parses an ISO 8601 date string into a *date* object

        * parse_datetime:

        parses an ISO 8601 date-time string into a *datetime* object

        * parse_duration:

        parses an ISO 8601 duration string into a *timedelta* or *Duration*

        object.

        * parse_tzinfo:

        parses the time zone info part of an ISO 8601 string into a

        *tzinfo* object.


        As ISO 8601 allows to define durations in years and months, and *timedelta*

        does not handle years and months, this module provides a *Duration* class,

        which can be used almost like a *timedelta* object (with some limitations).

        However, a *Duration* object can be converted into a *timedelta* object.


        There are also ISO formating methods for all supported data types. Each

        *xxx_isoformat* method accepts a format parameter. The default format is

        always the ISO 8601 expanded format. This is the same format used by

        *datetime.isoformat*:


        * time_isoformat:

        Intended to create ISO time strings with default format

        *hh:mm:ssZ*.

        * date_isoformat:

        Intended to create ISO date strings with default format

        *yyyy-mm-dd*.

        * datetime_isoformat:

        Intended to create ISO date-time strings with default format

        *yyyy-mm-ddThh:mm:ssZ*.

        * duration_isoformat:

        Intended to create ISO duration strings with default format

        *PnnYnnMnnDTnnHnnMnnS*.

        * tz_isoformat:

        Intended to create ISO time zone strings with default format

        *hh:mm*.

        * strftime:

        A re-implementation mostly compatible with Python''s *strftime*, but

        supports only those format strings, which can also be used for dates

        prior 1900. This method also understands how to format *datetime* and

        *Duration* instances.


        Installation:

        -------------


        This module can easily be installed with Python standard installation methods.

        Just use *setuptools* or *easy_install* as usual.


        Limitations:

        ------------


        * The parser accepts several date/time representation which should be invalid

        according to ISO 8601 standard.


        1. for date and time together, this parser accepts a mixture of basic and
        extended format.

        e.g. the date could be in basic format, while the time is accepted in extended
        format.

        It also allows short dates and times in date-time strings.

        2. For incomplete dates, the first day is chosen. e.g. 19th century results
        in a date of

        1901-01-01.

        3. negative *Duration* and *timedelta* value are not fully supported yet.


        Further information:

        --------------------


        The doc strings and unit tests should provide rather detailed information
        about

        the methods and their limitations.


        The source release provides a *setup.py* script and a *buildout.cfg*. Both
        can

        be used to run the unit tests included.


        Source code is available at `<http://hg.proclos.com/isodate>`_.



        CHANGES

        =======


        0.4.3 (2010-10-29)

        ------------------


        - Fixed problem with %P formating and fractions (supplied by David Brooks)


        0.4.2 (2010-10-28)

        ------------------


        - Implemented unary - for Duration (supplied by David Brooks)

        - Output fractional seconds with ''%P'' format. (partly supplied by David
        Brooks)


        0.4.1 (2010-10-13)

        ------------------


        - fixed bug in comparison between timedelta and Duration.

        - fixed precision problem with microseconds (reported by Tommi Virtanen)


        0.4.0 (2009-02-09)

        ------------------


        - added method to parse ISO 8601 time zone strings

        - added methods to create ISO 8601 conforming strings


        0.3.0 (2009-1-05)

        ------------------


        - Initial release



        TODOs

        =====


        This to do list contains some thoughts and ideas about missing features, and

        parts to think about, whether to implement them or not. This list is probably

        not complete.


        Missing features:

        -----------------


        * time formating does not allow to create fractional representations.

        * parser for ISO intervals.


        Documentation:

        --------------


        * parse_datetime:

        - complete documentation to show what this function allows, but ISO forbids.

        and vice verse.

        - support other separators between date and time than ''T''


        * parse_date:

        - yeardigits should be always greater than 4

        - dates before 0001-01-01 are not supported


        * parse_duration:

        - alternative formats are not fully supported due to parse_date restrictions

        - standard duration format is fully supported but not very restrictive.


        * Duration:

        - support fractional years and month in calculations

        - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)

        - refactor to have duration mathematics only at one place.

        - localize __str__ method (does timedelta do this?)

        - when is a Duration negative?

        - normalize Durations. months [00-12] and years ]-inf,+inf['
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
  - file: isodate/isodate-0.6.0.tar.gz
    attributes:
      metadata_version: '1.1'
      name: isodate
      version: 0.6.0
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formatter
      description: "ISO 8601 date/time parser\n=========================\n\n.. image::\
        \ https://travis-ci.org/gweis/isodate.svg?branch=master\n    :target: https://travis-ci.org/gweis/isodate\n\
        \    :alt: Travis-CI\n.. image:: https://coveralls.io/repos/gweis/isodate/badge.svg?branch=master\n\
        \    :target: https://coveralls.io/r/gweis/isodate?branch=master\n    :alt:\
        \ Coveralls\n.. image:: https://img.shields.io/pypi/v/isodate.svg\n    :target:\
        \ https://pypi.python.org/pypi/isodate/          \n    :alt: Latest Version\n\
        .. image:: https://img.shields.io/pypi/l/isodate.svg\n    :target: https://pypi.python.org/pypi/isodate/\
        \          \n    :alt: License\n\n\nThis module implements ISO 8601 date,\
        \ time and duration parsing.\nThe implementation follows ISO8601:2004 standard,\
        \ and implements only\ndate/time representations mentioned in the standard.\
        \ If something is not\nmentioned there, then it is treated as non existent,\
        \ and not as an allowed\noption.\n\nFor instance, ISO8601:2004 never mentions\
        \ 2 digit years. So, it is not\nintended by this module to support 2 digit\
        \ years. (while it may still\nbe valid as ISO date, because it is not explicitly\
        \ forbidden.)\nAnother example is, when no time zone information is given\
        \ for a time,\nthen it should be interpreted as local time, and not UTC.\n\
        \nAs this module maps ISO 8601 dates/times to standard Python data types,\
        \ like\n*date*, *time*, *datetime* and *timedelta*, it is not possible to\
        \ convert\nall possible ISO 8601 dates/times. For instance, dates before 0001-01-01\
        \ are\nnot allowed by the Python *date* and *datetime* classes. Additionally\n\
        fractional seconds are limited to microseconds. That means if the parser finds\n\
        for instance nanoseconds it will round it to microseconds.\n\nDocumentation\n\
        -------------\n\nCurrently there are four parsing methods available.\n   *\
        \ parse_time:\n        parses an ISO 8601 time string into a *time* object\n\
        \   * parse_date:\n        parses an ISO 8601 date string into a *date* object\n\
        \   * parse_datetime:\n        parses an ISO 8601 date-time string into a\
        \ *datetime* object\n   * parse_duration:\n        parses an ISO 8601 duration\
        \ string into a *timedelta* or *Duration*\n        object.\n   * parse_tzinfo:\n\
        \        parses the time zone info part of an ISO 8601 string into a\n   \
        \     *tzinfo* object.\n\nAs ISO 8601 allows to define durations in years\
        \ and months, and *timedelta*\ndoes not handle years and months, this module\
        \ provides a *Duration* class,\nwhich can be used almost like a *timedelta*\
        \ object (with some limitations).\nHowever, a *Duration* object can be converted\
        \ into a *timedelta* object.\n\nThere are also ISO formatting methods for\
        \ all supported data types. Each\n*xxx_isoformat* method accepts a format\
        \ parameter. The default format is\nalways the ISO 8601 expanded format. This\
        \ is the same format used by\n*datetime.isoformat*:\n\n    * time_isoformat:\n\
        \        Intended to create ISO time strings with default format\n       \
        \ *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended to create ISO date\
        \ strings with default format\n        *yyyy-mm-dd*.\n    * datetime_isoformat:\n\
        \        Intended to create ISO date-time strings with default format\n  \
        \      *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n        Intended\
        \ to create ISO duration strings with default format\n        *PnnYnnMnnDTnnHnnMnnS*.\n\
        \    * tz_isoformat:\n        Intended to create ISO time zone strings with\
        \ default format\n        *hh:mm*.\n    * strftime:\n        A re-implementation\
        \ mostly compatible with Python's *strftime*, but\n        supports only those\
        \ format strings, which can also be used for dates\n        prior 1900. This\
        \ method also understands how to format *datetime* and\n        *Duration*\
        \ instances.\n\nInstallation:\n-------------\n\nThis module can easily be\
        \ installed with Python standard installation methods.\n\nEither use *python\
        \ setup.py install* or in case you have *setuptools* or\n*distribute* available,\
        \ you can also use *easy_install*.\n\nLimitations:\n------------\n\n   * The\
        \ parser accepts several date/time representation which should be invalid\n\
        \     according to ISO 8601 standard.\n\n     1. for date and time together,\
        \ this parser accepts a mixture of basic and extended format.\n        e.g.\
        \ the date could be in basic format, while the time is accepted in extended\
        \ format.\n        It also allows short dates and times in date-time strings.\n\
        \     2. For incomplete dates, the first day is chosen. e.g. 19th century\
        \ results in a date of\n        1901-01-01.\n     3. negative *Duration* and\
        \ *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script,\nwhich can be used to run the unit\
        \ tests included.\n\nSource code is available at `<http://github.com/gweis/isodate>`_.\n\
        \nCHANGES\n=======\n\n0.6.0 (2017-10-13)\n------------------\n\n- support\
        \ incomplete month date (Fabien Loffredo)\n- rely on duck typing when doing\
        \ duration maths\n- support ':' as separator in fractional time zones (usrenmae)\n\
        \n\n0.5.4 (2015-08-06)\n------------------\n\n- Fix parsing of Periods (Fabien\
        \ Bochu)\n- Make Duration objects hashable (Geoffrey Fairchild)\n- Add multiplication\
        \ to duration (Reinoud Elhorst)\n\n\n0.5.1 (2014-11-07)\n------------------\n\
        \n- fixed pickling of Duration objects\n- raise ISO8601Error when there is\
        \ no 'T' separator in datetime strings (Adrian Coveney)\n\n\n0.5.0 (2014-02-23)\n\
        ------------------\n\n- ISO8601Error are subclasses of ValueError now (Michael\
        \ Hrivnak)\n- improve compatibility across various python variants and versions\n\
        - raise exceptions when using fractional years and months in date\n  maths\
        \ with durations\n- renamed method todatetime on Duraction objects to totimedelta\n\
        \n\n0.4.9 (2012-10-30)\n------------------\n\n- support pickling FixedOffset\
        \ instances\n- make sure parsed fractional seconds are in microseconds\n-\
        \ add leading zeros when formattig microseconds (Jarom Loveridge)\n\n\n0.4.8\
        \ (2012-05-04)\n------------------\n\n- fixed incompatibility of unittests\
        \ with python 2.5 and 2.6 (runs fine on 2.7\n  and 3.2)\n\n\n0.4.7 (2012-01-26)\n\
        ------------------\n\n- fixed tzinfo formatting (never pass None into tzinfo.utcoffset())\n\
        \n\n0.4.6 (2012-01-06)\n------------------\n\n- added Python 3 compatibility\
        \ via 2to3\n\n0.4.5 (2012-01-06)\n------------------\n\n- made setuptools\
        \ dependency optional\n\n0.4.4 (2011-04-16)\n------------------\n\n- Fixed\
        \ formatting of microseconds for datetime objects\n\n0.4.3 (2010-10-29)\n\
        ------------------\n\n- Fixed problem with %P formating and fractions (supplied\
        \ by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\n- Implemented\
        \ unary - for Duration (supplied by David Brooks)\n- Output fractional seconds\
        \ with '%P' format. (partly supplied by David Brooks)\n\n0.4.1 (2010-10-13)\n\
        ------------------\n\n- fixed bug in comparison between timedelta and Duration.\n\
        - fixed precision problem with microseconds (reported by Tommi Virtanen)\n\
        \n0.4.0 (2009-02-09)\n------------------\n\n- added method to parse ISO 8601\
        \ time zone strings\n- added methods to create ISO 8601 conforming strings\n\
        \n0.3.0 (2009-1-05)\n------------------\n\n- Initial release\n\nTODOs\n=====\n\
        \nThis to do list contains some thoughts and ideas about missing features,\
        \ and\nparts to think about, whether to implement them or not. This list is\
        \ probably\nnot complete.\n\nMissing features:\n-----------------\n\n    *\
        \ time formating does not allow to create fractional representations.\n  \
        \  * parser for ISO intervals.\n    * currently microseconds are always padded\
        \ to a length of 6 characters.\n      trailing 0s should be optional\n\nDocumentation:\n\
        --------------\n\n    * parse_datetime:\n       - complete documentation to\
        \ show what this function allows, but ISO forbids.\n         and vice verse.\n\
        \       - support other separators between date and time than 'T'\n\n    *\
        \ parse_date:\n       - yeardigits should be always greater than 4\n     \
        \  - dates before 0001-01-01 are not supported\n\n    * parse_duration:\n\
        \       - alternative formats are not fully supported due to parse_date restrictions\n\
        \       - standard duration format is fully supported but not very restrictive.\n\
        \n    * Duration:\n       - support fractional years and month in calculations\n\
        \       - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n\
        \       - refactor to have duration mathematics only at one place.\n     \
        \  - localize __str__ method (does timedelta do this?)\n       - when is a\
        \ Duration negative?\n       - normalize Durations. months [00-12] and years\
        \ ]-inf,+inf["
      home_page: https://github.com/gweis/isodate/
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: BSD License", "Operating System :: OS Independent",
        "Programming Language :: Python", "Programming Language :: Python :: 2.6",
        "Programming Language :: Python :: 2.7", "Programming Language :: Python ::
        3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python
        :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language ::
        Python :: Implementation :: PyPy", "Topic :: Internet", "Topic :: Software
        Development :: Libraries :: Python Modules"]'
  - file: isodate/isodate-0.3.0.tar.gz
    attributes:
      metadata_version: '1.0'
      name: isodate
      version: 0.3.0
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: 'ISO 8601 date/time parser

        =========================


        This module implements ISO 8601 date, time and duration parsing.

        The implementation follows ISO8601:2004 standard, and implements only

        date/time representations mentioned in the standard. If something is not

        mentioned there, then it is treated as non existent, and not as an allowed

        option.


        For instance, ISO8601:2004 never mentions 2 digit years. So, it is not

        intended by this module to support 2 digit years. (while it may still

        be valid as ISO date, because it is not explicitly forbidden.)

        Another example is, that if no time zone designation is given for a time,

        the it is a local time, and not UTC.


        As this module maps ISO 8601 dates/times to standard Python data types, like

        *date*, *time*, *datetime* and *timedelta*, it is not possible to convert

        all possible ISO 8601 dates/times. For instance, dates before 0001-01-01 are

        not allowed by the Python *date* and *datetime* classes.


        Documentation

        -------------


        Currently there are four parsing methods available.

        * parse_time:

        parses an ISO 8601 time string into a *time* object

        * parse_date:

        parses an ISO 8601 date string into a *date* object

        * parse_datetime:

        parses an ISO 8601 date-time string into a *datetime* object

        * parse_duration:

        parses an ISO 8601 duration string into a *timedelta* or *Duration*

        object.


        As ISO 8601 allows to define durations in years and months, and *timedelta*

        does not handle years and months, this module provides a *Duration* class,

        which can be used almost like a *timedelta* object (with some limitations).

        However, a *Duration* object can be converted into a *timedelta* object.


        Installation:

        -------------


        This module can easily be installed with Python standard installation methods.

        Just use *setuptools* or *easy_instal* as usual.


        Limitations:

        ------------


        * The parser accepts several date/time representation which should be invalid

        according to ISO 8601 standard.


        1. for date and time together, this parser accepts a mixture of basic and
        extended format.

        e.g. the date could be in basic format, while the time is accepted in extended
        format.

        It also allows short dates and times in date-time strings.

        2. For incomplete dates, the first day is chosen. e.g. 19th century results
        in a date of

        1901-01-01.


        Further information:

        --------------------


        The doc strings and unit tests should provide rather detailed information
        about

        the methods and their limitations.


        The source release provides a *setup.py* script and a *buildout.cfg*. Both
        can

        be used to run the unit tests included.


        Source code is available at `<http://hg.proclos.com/isodate>`_.



        CHANGES

        =======


        0.3.0 (2009-1-05)

        ------------------


        - Initial release



        TODOs

        =====


        This to do list contains some thoughts and ideas about missing features, and

        parts to think about, whether to implement them or not. This list is probably

        not complete.


        Missing features:

        -----------------


        * methods to format *date*, *time*, *datetime*, *timedelta* and *Duration*

        objects to various ISO strings.

        * parser for ISO intervals.


        Documentation:

        --------------


        * parse_datetime:

        - complete documentation to show what this function allows, but ISO forbids.

        and vice verse.

        - support other separators between date and time than ''T''


        * parse_date:

        - yeardigits should be always greater than 4

        - dates before 0001-01-01 are not supported


        * parse_duration:

        - alternative formats are not fully supported due to parse_date restrictions

        - standard duration format is fully supported but not very restrictive.


        * Duration:

        - support fractional years and month in calculations

        - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)

        - refactor to have duration mathematics only at one place.

        - localize __str__ method (does timedelta do this?)'
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
  - file: isodate/isodate-0.4.5.tar.gz
    attributes:
      metadata_version: '1.0'
      name: isodate
      version: 0.4.5
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: "ISO 8601 date/time parser\n=========================\n\nThis module\
        \ implements ISO 8601 date, time and duration parsing.\nThe implementation\
        \ follows ISO8601:2004 standard, and implements only\ndate/time representations\
        \ mentioned in the standard. If something is not\nmentioned there, then it\
        \ is treated as non existent, and not as an allowed\noption.\n\nFor instance,\
        \ ISO8601:2004 never mentions 2 digit years. So, it is not\nintended by this\
        \ module to support 2 digit years. (while it may still\nbe valid as ISO date,\
        \ because it is not explicitly forbidden.)\nAnother example is, when no time\
        \ zone information is given for a time,\nthen it should be interpreted as\
        \ local time, and not UTC.\n\nAs this module maps ISO 8601 dates/times to\
        \ standard Python data types, like\n*date*, *time*, *datetime* and *timedelta*,\
        \ it is not possible to convert\nall possible ISO 8601 dates/times. For instance,\
        \ dates before 0001-01-01 are\nnot allowed by the Python *date* and *datetime*\
        \ classes. Additionally\nfractional seconds are limited to microseconds. That\
        \ means if the parser finds\nfor instance nanoseconds it will round it to\
        \ microseconds.\n\nDocumentation\n-------------\n\nCurrently there are four\
        \ parsing methods available.\n   * parse_time:\n        parses an ISO 8601\
        \ time string into a *time* object\n   * parse_date:\n        parses an ISO\
        \ 8601 date string into a *date* object\n   * parse_datetime:\n        parses\
        \ an ISO 8601 date-time string into a *datetime* object\n   * parse_duration:\n\
        \        parses an ISO 8601 duration string into a *timedelta* or *Duration*\n\
        \        object.\n   * parse_tzinfo:\n        parses the time zone info part\
        \ of an ISO 8601 string into a\n        *tzinfo* object.\n\nAs ISO 8601 allows\
        \ to define durations in years and months, and *timedelta*\ndoes not handle\
        \ years and months, this module provides a *Duration* class,\nwhich can be\
        \ used almost like a *timedelta* object (with some limitations).\nHowever,\
        \ a *Duration* object can be converted into a *timedelta* object.\n\nThere\
        \ are also ISO formating methods for all supported data types. Each\n*xxx_isoformat*\
        \ method accepts a format parameter. The default format is\nalways the ISO\
        \ 8601 expanded format. This is the same format used by\n*datetime.isoformat*:\n\
        \n    * time_isoformat:\n        Intended to create ISO time strings with\
        \ default format\n        *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended\
        \ to create ISO date strings with default format\n        *yyyy-mm-dd*.\n\
        \    * datetime_isoformat:\n        Intended to create ISO date-time strings\
        \ with default format\n        *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n\
        \        Intended to create ISO duration strings with default format\n   \
        \     *PnnYnnMnnDTnnHnnMnnS*.\n    * tz_isoformat:\n        Intended to create\
        \ ISO time zone strings with default format\n        *hh:mm*.\n    * strftime:\n\
        \        A re-implementation mostly compatible with Python's *strftime*, but\n\
        \        supports only those format strings, which can also be used for dates\n\
        \        prior 1900. This method also understands how to format *datetime*\
        \ and\n        *Duration* instances.\n\nInstallation:\n-------------\n\nThis\
        \ module can easily be installed with Python standard installation methods.\n\
        \nEither use *python setup.py install* or in case you have *setuptools* or\n\
        *distribute* available, you can also use *easy_install*.\n\nLimitations:\n\
        ------------\n\n   * The parser accepts several date/time representation which\
        \ should be invalid\n     according to ISO 8601 standard.\n\n     1. for date\
        \ and time together, this parser accepts a mixture of basic and extended format.\n\
        \        e.g. the date could be in basic format, while the time is accepted\
        \ in extended format.\n        It also allows short dates and times in date-time\
        \ strings.\n     2. For incomplete dates, the first day is chosen. e.g. 19th\
        \ century results in a date of\n        1901-01-01.\n     3. negative *Duration*\
        \ and *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script and a *buildout.cfg*. Both can\nbe\
        \ used to run the unit tests included.\n\nSource code is available at `<http://hg.proclos.com/isodate>`_.\n\
        \n\nCHANGES\n=======\n\n0.4.5 (2012-01-06)\n------------------\n\n- made setuptools\
        \ dependency optional\n\n0.4.4 (2011-04-16)\n------------------\n\n- Fixed\
        \ formatting of microseconds for datetime objects\n\n0.4.3 (2010-10-29)\n\
        ------------------\n\n- Fixed problem with %P formating and fractions (supplied\
        \ by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\n- Implemented\
        \ unary - for Duration (supplied by David Brooks)\n- Output fractional seconds\
        \ with '%P' format. (partly supplied by David Brooks)\n\n0.4.1 (2010-10-13)\n\
        ------------------\n\n- fixed bug in comparison between timedelta and Duration.\n\
        - fixed precision problem with microseconds (reported by Tommi Virtanen)\n\
        \n0.4.0 (2009-02-09)\n------------------\n\n- added method to parse ISO 8601\
        \ time zone strings\n- added methods to create ISO 8601 conforming strings\n\
        \n0.3.0 (2009-1-05)\n------------------\n\n- Initial release\n\nTODOs\n=====\n\
        \nThis to do list contains some thoughts and ideas about missing features,\
        \ and\nparts to think about, whether to implement them or not. This list is\
        \ probably\nnot complete.\n\nMissing features:\n-----------------\n\n    *\
        \ time formating does not allow to create fractional representations.\n  \
        \  * parser for ISO intervals.\n    * currently microseconds are always padded\
        \ to a length of 6 characters.\n      trailing 0s should be optional\n\nDocumentation:\n\
        --------------\n\n    * parse_datetime:\n       - complete documentation to\
        \ show what this function allows, but ISO forbids.\n         and vice verse.\n\
        \       - support other separators between date and time than 'T'\n\n    *\
        \ parse_date:\n       - yeardigits should be always greater than 4\n     \
        \  - dates before 0001-01-01 are not supported\n\n    * parse_duration:\n\
        \       - alternative formats are not fully supported due to parse_date restrictions\n\
        \       - standard duration format is fully supported but not very restrictive.\n\
        \n    * Duration:\n       - support fractional years and month in calculations\n\
        \       - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n\
        \       - refactor to have duration mathematics only at one place.\n     \
        \  - localize __str__ method (does timedelta do this?)\n       - when is a\
        \ Duration negative?\n       - normalize Durations. months [00-12] and years\
        \ ]-inf,+inf["
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
  - file: isodate/isodate-0.6.0-py2.py3-none-any.whl
    attributes:
      metadata_version: '2.0'
      name: isodate
      version: 0.6.0
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formatter
      home_page: https://github.com/gweis/isodate/
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: BSD License", "Operating System :: OS Independent",
        "Programming Language :: Python", "Programming Language :: Python :: 2.6",
        "Programming Language :: Python :: 2.7", "Programming Language :: Python ::
        3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python
        :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language ::
        Python :: Implementation :: PyPy", "Topic :: Internet", "Topic :: Software
        Development :: Libraries :: Python Modules"]'
      requires_dist: '["six"]'
      description: "\nISO 8601 date/time parser\n=========================\n\n.. image::\
        \ https://travis-ci.org/gweis/isodate.svg?branch=master\n    :target: https://travis-ci.org/gweis/isodate\n\
        \    :alt: Travis-CI\n.. image:: https://coveralls.io/repos/gweis/isodate/badge.svg?branch=master\n\
        \    :target: https://coveralls.io/r/gweis/isodate?branch=master\n    :alt:\
        \ Coveralls\n.. image:: https://img.shields.io/pypi/v/isodate.svg\n    :target:\
        \ https://pypi.python.org/pypi/isodate/          \n    :alt: Latest Version\n\
        .. image:: https://img.shields.io/pypi/l/isodate.svg\n    :target: https://pypi.python.org/pypi/isodate/\
        \          \n    :alt: License\n\n\nThis module implements ISO 8601 date,\
        \ time and duration parsing.\nThe implementation follows ISO8601:2004 standard,\
        \ and implements only\ndate/time representations mentioned in the standard.\
        \ If something is not\nmentioned there, then it is treated as non existent,\
        \ and not as an allowed\noption.\n\nFor instance, ISO8601:2004 never mentions\
        \ 2 digit years. So, it is not\nintended by this module to support 2 digit\
        \ years. (while it may still\nbe valid as ISO date, because it is not explicitly\
        \ forbidden.)\nAnother example is, when no time zone information is given\
        \ for a time,\nthen it should be interpreted as local time, and not UTC.\n\
        \nAs this module maps ISO 8601 dates/times to standard Python data types,\
        \ like\n*date*, *time*, *datetime* and *timedelta*, it is not possible to\
        \ convert\nall possible ISO 8601 dates/times. For instance, dates before 0001-01-01\
        \ are\nnot allowed by the Python *date* and *datetime* classes. Additionally\n\
        fractional seconds are limited to microseconds. That means if the parser finds\n\
        for instance nanoseconds it will round it to microseconds.\n\nDocumentation\n\
        -------------\n\nCurrently there are four parsing methods available.\n   *\
        \ parse_time:\n        parses an ISO 8601 time string into a *time* object\n\
        \   * parse_date:\n        parses an ISO 8601 date string into a *date* object\n\
        \   * parse_datetime:\n        parses an ISO 8601 date-time string into a\
        \ *datetime* object\n   * parse_duration:\n        parses an ISO 8601 duration\
        \ string into a *timedelta* or *Duration*\n        object.\n   * parse_tzinfo:\n\
        \        parses the time zone info part of an ISO 8601 string into a\n   \
        \     *tzinfo* object.\n\nAs ISO 8601 allows to define durations in years\
        \ and months, and *timedelta*\ndoes not handle years and months, this module\
        \ provides a *Duration* class,\nwhich can be used almost like a *timedelta*\
        \ object (with some limitations).\nHowever, a *Duration* object can be converted\
        \ into a *timedelta* object.\n\nThere are also ISO formatting methods for\
        \ all supported data types. Each\n*xxx_isoformat* method accepts a format\
        \ parameter. The default format is\nalways the ISO 8601 expanded format. This\
        \ is the same format used by\n*datetime.isoformat*:\n\n    * time_isoformat:\n\
        \        Intended to create ISO time strings with default format\n       \
        \ *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended to create ISO date\
        \ strings with default format\n        *yyyy-mm-dd*.\n    * datetime_isoformat:\n\
        \        Intended to create ISO date-time strings with default format\n  \
        \      *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n        Intended\
        \ to create ISO duration strings with default format\n        *PnnYnnMnnDTnnHnnMnnS*.\n\
        \    * tz_isoformat:\n        Intended to create ISO time zone strings with\
        \ default format\n        *hh:mm*.\n    * strftime:\n        A re-implementation\
        \ mostly compatible with Python's *strftime*, but\n        supports only those\
        \ format strings, which can also be used for dates\n        prior 1900. This\
        \ method also understands how to format *datetime* and\n        *Duration*\
        \ instances.\n\nInstallation:\n-------------\n\nThis module can easily be\
        \ installed with Python standard installation methods.\n\nEither use *python\
        \ setup.py install* or in case you have *setuptools* or\n*distribute* available,\
        \ you can also use *easy_install*.\n\nLimitations:\n------------\n\n   * The\
        \ parser accepts several date/time representation which should be invalid\n\
        \     according to ISO 8601 standard.\n\n     1. for date and time together,\
        \ this parser accepts a mixture of basic and extended format.\n        e.g.\
        \ the date could be in basic format, while the time is accepted in extended\
        \ format.\n        It also allows short dates and times in date-time strings.\n\
        \     2. For incomplete dates, the first day is chosen. e.g. 19th century\
        \ results in a date of\n        1901-01-01.\n     3. negative *Duration* and\
        \ *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script,\nwhich can be used to run the unit\
        \ tests included.\n\nSource code is available at `<http://github.com/gweis/isodate>`_.\n\
        \nCHANGES\n=======\n\n0.6.0 (2017-10-13)\n------------------\n\n- support\
        \ incomplete month date (Fabien Loffredo)\n- rely on duck typing when doing\
        \ duration maths\n- support ':' as separator in fractional time zones (usrenmae)\n\
        \n\n0.5.4 (2015-08-06)\n------------------\n\n- Fix parsing of Periods (Fabien\
        \ Bochu)\n- Make Duration objects hashable (Geoffrey Fairchild)\n- Add multiplication\
        \ to duration (Reinoud Elhorst)\n\n\n0.5.1 (2014-11-07)\n------------------\n\
        \n- fixed pickling of Duration objects\n- raise ISO8601Error when there is\
        \ no 'T' separator in datetime strings (Adrian Coveney)\n\n\n0.5.0 (2014-02-23)\n\
        ------------------\n\n- ISO8601Error are subclasses of ValueError now (Michael\
        \ Hrivnak)\n- improve compatibility across various python variants and versions\n\
        - raise exceptions when using fractional years and months in date\n  maths\
        \ with durations\n- renamed method todatetime on Duraction objects to totimedelta\n\
        \n\n0.4.9 (2012-10-30)\n------------------\n\n- support pickling FixedOffset\
        \ instances\n- make sure parsed fractional seconds are in microseconds\n-\
        \ add leading zeros when formattig microseconds (Jarom Loveridge)\n\n\n0.4.8\
        \ (2012-05-04)\n------------------\n\n- fixed incompatibility of unittests\
        \ with python 2.5 and 2.6 (runs fine on 2.7\n  and 3.2)\n\n\n0.4.7 (2012-01-26)\n\
        ------------------\n\n- fixed tzinfo formatting (never pass None into tzinfo.utcoffset())\n\
        \n\n0.4.6 (2012-01-06)\n------------------\n\n- added Python 3 compatibility\
        \ via 2to3\n\n0.4.5 (2012-01-06)\n------------------\n\n- made setuptools\
        \ dependency optional\n\n0.4.4 (2011-04-16)\n------------------\n\n- Fixed\
        \ formatting of microseconds for datetime objects\n\n0.4.3 (2010-10-29)\n\
        ------------------\n\n- Fixed problem with %P formating and fractions (supplied\
        \ by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\n- Implemented\
        \ unary - for Duration (supplied by David Brooks)\n- Output fractional seconds\
        \ with '%P' format. (partly supplied by David Brooks)\n\n0.4.1 (2010-10-13)\n\
        ------------------\n\n- fixed bug in comparison between timedelta and Duration.\n\
        - fixed precision problem with microseconds (reported by Tommi Virtanen)\n\
        \n0.4.0 (2009-02-09)\n------------------\n\n- added method to parse ISO 8601\
        \ time zone strings\n- added methods to create ISO 8601 conforming strings\n\
        \n0.3.0 (2009-1-05)\n------------------\n\n- Initial release\n\nTODOs\n=====\n\
        \nThis to do list contains some thoughts and ideas about missing features,\
        \ and\nparts to think about, whether to implement them or not. This list is\
        \ probably\nnot complete.\n\nMissing features:\n-----------------\n\n    *\
        \ time formating does not allow to create fractional representations.\n  \
        \  * parser for ISO intervals.\n    * currently microseconds are always padded\
        \ to a length of 6 characters.\n      trailing 0s should be optional\n\nDocumentation:\n\
        --------------\n\n    * parse_datetime:\n       - complete documentation to\
        \ show what this function allows, but ISO forbids.\n         and vice verse.\n\
        \       - support other separators between date and time than 'T'\n\n    *\
        \ parse_date:\n       - yeardigits should be always greater than 4\n     \
        \  - dates before 0001-01-01 are not supported\n\n    * parse_duration:\n\
        \       - alternative formats are not fully supported due to parse_date restrictions\n\
        \       - standard duration format is fully supported but not very restrictive.\n\
        \n    * Duration:\n       - support fractional years and month in calculations\n\
        \       - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n\
        \       - refactor to have duration mathematics only at one place.\n     \
        \  - localize __str__ method (does timedelta do this?)\n       - when is a\
        \ Duration negative?\n       - normalize Durations. months [00-12] and years\
        \ ]-inf,+inf[\n\n\n"
  - file: isodate/isodate-0.4.9.tar.gz
    attributes:
      metadata_version: '1.1'
      name: isodate
      version: 0.4.9
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: "ISO 8601 date/time parser\n=========================\n\nThis module\
        \ implements ISO 8601 date, time and duration parsing.\nThe implementation\
        \ follows ISO8601:2004 standard, and implements only\ndate/time representations\
        \ mentioned in the standard. If something is not\nmentioned there, then it\
        \ is treated as non existent, and not as an allowed\noption.\n\nFor instance,\
        \ ISO8601:2004 never mentions 2 digit years. So, it is not\nintended by this\
        \ module to support 2 digit years. (while it may still\nbe valid as ISO date,\
        \ because it is not explicitly forbidden.)\nAnother example is, when no time\
        \ zone information is given for a time,\nthen it should be interpreted as\
        \ local time, and not UTC.\n\nAs this module maps ISO 8601 dates/times to\
        \ standard Python data types, like\n*date*, *time*, *datetime* and *timedelta*,\
        \ it is not possible to convert\nall possible ISO 8601 dates/times. For instance,\
        \ dates before 0001-01-01 are\nnot allowed by the Python *date* and *datetime*\
        \ classes. Additionally\nfractional seconds are limited to microseconds. That\
        \ means if the parser finds\nfor instance nanoseconds it will round it to\
        \ microseconds.\n\nDocumentation\n-------------\n\nCurrently there are four\
        \ parsing methods available.\n   * parse_time:\n        parses an ISO 8601\
        \ time string into a *time* object\n   * parse_date:\n        parses an ISO\
        \ 8601 date string into a *date* object\n   * parse_datetime:\n        parses\
        \ an ISO 8601 date-time string into a *datetime* object\n   * parse_duration:\n\
        \        parses an ISO 8601 duration string into a *timedelta* or *Duration*\n\
        \        object.\n   * parse_tzinfo:\n        parses the time zone info part\
        \ of an ISO 8601 string into a\n        *tzinfo* object.\n\nAs ISO 8601 allows\
        \ to define durations in years and months, and *timedelta*\ndoes not handle\
        \ years and months, this module provides a *Duration* class,\nwhich can be\
        \ used almost like a *timedelta* object (with some limitations).\nHowever,\
        \ a *Duration* object can be converted into a *timedelta* object.\n\nThere\
        \ are also ISO formating methods for all supported data types. Each\n*xxx_isoformat*\
        \ method accepts a format parameter. The default format is\nalways the ISO\
        \ 8601 expanded format. This is the same format used by\n*datetime.isoformat*:\n\
        \n    * time_isoformat:\n        Intended to create ISO time strings with\
        \ default format\n        *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended\
        \ to create ISO date strings with default format\n        *yyyy-mm-dd*.\n\
        \    * datetime_isoformat:\n        Intended to create ISO date-time strings\
        \ with default format\n        *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n\
        \        Intended to create ISO duration strings with default format\n   \
        \     *PnnYnnMnnDTnnHnnMnnS*.\n    * tz_isoformat:\n        Intended to create\
        \ ISO time zone strings with default format\n        *hh:mm*.\n    * strftime:\n\
        \        A re-implementation mostly compatible with Python's *strftime*, but\n\
        \        supports only those format strings, which can also be used for dates\n\
        \        prior 1900. This method also understands how to format *datetime*\
        \ and\n        *Duration* instances.\n\nInstallation:\n-------------\n\nThis\
        \ module can easily be installed with Python standard installation methods.\n\
        \nEither use *python setup.py install* or in case you have *setuptools* or\n\
        *distribute* available, you can also use *easy_install*.\n\nLimitations:\n\
        ------------\n\n   * The parser accepts several date/time representation which\
        \ should be invalid\n     according to ISO 8601 standard.\n\n     1. for date\
        \ and time together, this parser accepts a mixture of basic and extended format.\n\
        \        e.g. the date could be in basic format, while the time is accepted\
        \ in extended format.\n        It also allows short dates and times in date-time\
        \ strings.\n     2. For incomplete dates, the first day is chosen. e.g. 19th\
        \ century results in a date of\n        1901-01-01.\n     3. negative *Duration*\
        \ and *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script and a *buildout.cfg*. Both can\nbe\
        \ used to run the unit tests included.\n\nSource code is available at `<http://github.com/gweis/isodate>`_.\n\
        \nCHANGES\n=======\n\n0.4.9 (2012-10-30)\n------------------\n\n- support\
        \ pickling FixedOffset instances\n- make sure parsed fractional seconds are\
        \ in microseconds\n- add leading zeros when formattig microseconds (Jarom\
        \ Loveridge)\n\n\n0.4.8 (2012-05-04)\n------------------\n\n- fixed incompatibility\
        \ of unittests with python 2.5 and 2.6 (runs fine on 2.7\n  and 3.2)\n\n\n\
        0.4.7 (2012-01-26)\n------------------\n\n- fixed tzinfo formatting (never\
        \ pass None into tzinfo.utcoffset())\n\n\n0.4.6 (2012-01-06)\n------------------\n\
        \n- added Python 3 compatibility via 2to3\n\n0.4.5 (2012-01-06)\n------------------\n\
        \n- made setuptools dependency optional\n\n0.4.4 (2011-04-16)\n------------------\n\
        \n- Fixed formatting of microseconds for datetime objects\n\n0.4.3 (2010-10-29)\n\
        ------------------\n\n- Fixed problem with %P formating and fractions (supplied\
        \ by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\n- Implemented\
        \ unary - for Duration (supplied by David Brooks)\n- Output fractional seconds\
        \ with '%P' format. (partly supplied by David Brooks)\n\n0.4.1 (2010-10-13)\n\
        ------------------\n\n- fixed bug in comparison between timedelta and Duration.\n\
        - fixed precision problem with microseconds (reported by Tommi Virtanen)\n\
        \n0.4.0 (2009-02-09)\n------------------\n\n- added method to parse ISO 8601\
        \ time zone strings\n- added methods to create ISO 8601 conforming strings\n\
        \n0.3.0 (2009-1-05)\n------------------\n\n- Initial release\n\nTODOs\n=====\n\
        \nThis to do list contains some thoughts and ideas about missing features,\
        \ and\nparts to think about, whether to implement them or not. This list is\
        \ probably\nnot complete.\n\nMissing features:\n-----------------\n\n    *\
        \ time formating does not allow to create fractional representations.\n  \
        \  * parser for ISO intervals.\n    * currently microseconds are always padded\
        \ to a length of 6 characters.\n      trailing 0s should be optional\n\nDocumentation:\n\
        --------------\n\n    * parse_datetime:\n       - complete documentation to\
        \ show what this function allows, but ISO forbids.\n         and vice verse.\n\
        \       - support other separators between date and time than 'T'\n\n    *\
        \ parse_date:\n       - yeardigits should be always greater than 4\n     \
        \  - dates before 0001-01-01 are not supported\n\n    * parse_duration:\n\
        \       - alternative formats are not fully supported due to parse_date restrictions\n\
        \       - standard duration format is fully supported but not very restrictive.\n\
        \n    * Duration:\n       - support fractional years and month in calculations\n\
        \       - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n\
        \       - refactor to have duration mathematics only at one place.\n     \
        \  - localize __str__ method (does timedelta do this?)\n       - when is a\
        \ Duration negative?\n       - normalize Durations. months [00-12] and years\
        \ ]-inf,+inf["
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: BSD License", "Operating System :: OS Independent",
        "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming
        Language :: Python :: 3", "Topic :: Internet", "Topic :: Software Development
        :: Libraries :: Python Modules"]'
  - file: isodate/isodate-0.6.1-py2.py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: isodate
      version: 0.6.1
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formatter
      home_page: https://github.com/gweis/isodate/
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: BSD License", "Operating System :: OS Independent",
        "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming
        Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming
        Language :: Python :: 3.10", "Programming Language :: Python :: Implementation
        :: PyPy", "Topic :: Internet", "Topic :: Software Development :: Libraries
        :: Python Modules"]'
      requires_dist: '["six"]'
      description: "\nISO 8601 date/time parser\n=========================\n\n.. image::\
        \ https://travis-ci.org/gweis/isodate.svg?branch=master\n    :target: https://travis-ci.org/gweis/isodate\n\
        \    :alt: Travis-CI\n.. image:: https://coveralls.io/repos/gweis/isodate/badge.svg?branch=master\n\
        \    :target: https://coveralls.io/r/gweis/isodate?branch=master\n    :alt:\
        \ Coveralls\n.. image:: https://img.shields.io/pypi/v/isodate.svg\n    :target:\
        \ https://pypi.python.org/pypi/isodate/          \n    :alt: Latest Version\n\
        .. image:: https://img.shields.io/pypi/l/isodate.svg\n    :target: https://pypi.python.org/pypi/isodate/\
        \          \n    :alt: License\n\n\nThis module implements ISO 8601 date,\
        \ time and duration parsing.\nThe implementation follows ISO8601:2004 standard,\
        \ and implements only\ndate/time representations mentioned in the standard.\
        \ If something is not\nmentioned there, then it is treated as non existent,\
        \ and not as an allowed\noption.\n\nFor instance, ISO8601:2004 never mentions\
        \ 2 digit years. So, it is not\nintended by this module to support 2 digit\
        \ years. (while it may still\nbe valid as ISO date, because it is not explicitly\
        \ forbidden.)\nAnother example is, when no time zone information is given\
        \ for a time,\nthen it should be interpreted as local time, and not UTC.\n\
        \nAs this module maps ISO 8601 dates/times to standard Python data types,\
        \ like\n*date*, *time*, *datetime* and *timedelta*, it is not possible to\
        \ convert\nall possible ISO 8601 dates/times. For instance, dates before 0001-01-01\
        \ are\nnot allowed by the Python *date* and *datetime* classes. Additionally\n\
        fractional seconds are limited to microseconds. That means if the parser finds\n\
        for instance nanoseconds it will round it to microseconds.\n\nDocumentation\n\
        -------------\n\nCurrently there are four parsing methods available.\n   *\
        \ parse_time:\n        parses an ISO 8601 time string into a *time* object\n\
        \   * parse_date:\n        parses an ISO 8601 date string into a *date* object\n\
        \   * parse_datetime:\n        parses an ISO 8601 date-time string into a\
        \ *datetime* object\n   * parse_duration:\n        parses an ISO 8601 duration\
        \ string into a *timedelta* or *Duration*\n        object.\n   * parse_tzinfo:\n\
        \        parses the time zone info part of an ISO 8601 string into a\n   \
        \     *tzinfo* object.\n\nAs ISO 8601 allows to define durations in years\
        \ and months, and *timedelta*\ndoes not handle years and months, this module\
        \ provides a *Duration* class,\nwhich can be used almost like a *timedelta*\
        \ object (with some limitations).\nHowever, a *Duration* object can be converted\
        \ into a *timedelta* object.\n\nThere are also ISO formatting methods for\
        \ all supported data types. Each\n*xxx_isoformat* method accepts a format\
        \ parameter. The default format is\nalways the ISO 8601 expanded format. This\
        \ is the same format used by\n*datetime.isoformat*:\n\n    * time_isoformat:\n\
        \        Intended to create ISO time strings with default format\n       \
        \ *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended to create ISO date\
        \ strings with default format\n        *yyyy-mm-dd*.\n    * datetime_isoformat:\n\
        \        Intended to create ISO date-time strings with default format\n  \
        \      *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n        Intended\
        \ to create ISO duration strings with default format\n        *PnnYnnMnnDTnnHnnMnnS*.\n\
        \    * tz_isoformat:\n        Intended to create ISO time zone strings with\
        \ default format\n        *hh:mm*.\n    * strftime:\n        A re-implementation\
        \ mostly compatible with Python's *strftime*, but\n        supports only those\
        \ format strings, which can also be used for dates\n        prior 1900. This\
        \ method also understands how to format *datetime* and\n        *Duration*\
        \ instances.\n\nInstallation:\n-------------\n\nThis module can easily be\
        \ installed with Python standard installation methods.\n\nEither use *python\
        \ setup.py install* or in case you have *setuptools* or\n*distribute* available,\
        \ you can also use *easy_install*.\n\nLimitations:\n------------\n\n   * The\
        \ parser accepts several date/time representation which should be invalid\n\
        \     according to ISO 8601 standard.\n\n     1. for date and time together,\
        \ this parser accepts a mixture of basic and extended format.\n        e.g.\
        \ the date could be in basic format, while the time is accepted in extended\
        \ format.\n        It also allows short dates and times in date-time strings.\n\
        \     2. For incomplete dates, the first day is chosen. e.g. 19th century\
        \ results in a date of\n        1901-01-01.\n     3. negative *Duration* and\
        \ *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script,\nwhich can be used to run the unit\
        \ tests included.\n\nSource code is available at `<http://github.com/gweis/isodate>`_.\n\
        \nCHANGES\n=======\n\n0.6.1 (2021-12-13)\n------------------\n\n- support\
        \ python 3.10 ()\n- last version to support py 2.7\n\n\n0.6.0 (2017-10-13)\n\
        ------------------\n\n- support incomplete month date (Fabien Loffredo)\n\
        - rely on duck typing when doing duration maths\n- support ':' as separator\
        \ in fractional time zones (usrenmae)\n\n\n0.5.4 (2015-08-06)\n------------------\n\
        \n- Fix parsing of Periods (Fabien Bochu)\n- Make Duration objects hashable\
        \ (Geoffrey Fairchild)\n- Add multiplication to duration (Reinoud Elhorst)\n\
        \n\n0.5.1 (2014-11-07)\n------------------\n\n- fixed pickling of Duration\
        \ objects\n- raise ISO8601Error when there is no 'T' separator in datetime\
        \ strings (Adrian Coveney)\n\n\n0.5.0 (2014-02-23)\n------------------\n\n\
        - ISO8601Error are subclasses of ValueError now (Michael Hrivnak)\n- improve\
        \ compatibility across various python variants and versions\n- raise exceptions\
        \ when using fractional years and months in date\n  maths with durations\n\
        - renamed method todatetime on Duraction objects to totimedelta\n\n\n0.4.9\
        \ (2012-10-30)\n------------------\n\n- support pickling FixedOffset instances\n\
        - make sure parsed fractional seconds are in microseconds\n- add leading zeros\
        \ when formattig microseconds (Jarom Loveridge)\n\n\n0.4.8 (2012-05-04)\n\
        ------------------\n\n- fixed incompatibility of unittests with python 2.5\
        \ and 2.6 (runs fine on 2.7\n  and 3.2)\n\n\n0.4.7 (2012-01-26)\n------------------\n\
        \n- fixed tzinfo formatting (never pass None into tzinfo.utcoffset())\n\n\n\
        0.4.6 (2012-01-06)\n------------------\n\n- added Python 3 compatibility via\
        \ 2to3\n\n0.4.5 (2012-01-06)\n------------------\n\n- made setuptools dependency\
        \ optional\n\n0.4.4 (2011-04-16)\n------------------\n\n- Fixed formatting\
        \ of microseconds for datetime objects\n\n0.4.3 (2010-10-29)\n------------------\n\
        \n- Fixed problem with %P formating and fractions (supplied by David Brooks)\n\
        \n0.4.2 (2010-10-28)\n------------------\n\n- Implemented unary - for Duration\
        \ (supplied by David Brooks)\n- Output fractional seconds with '%P' format.\
        \ (partly supplied by David Brooks)\n\n0.4.1 (2010-10-13)\n------------------\n\
        \n- fixed bug in comparison between timedelta and Duration.\n- fixed precision\
        \ problem with microseconds (reported by Tommi Virtanen)\n\n0.4.0 (2009-02-09)\n\
        ------------------\n\n- added method to parse ISO 8601 time zone strings\n\
        - added methods to create ISO 8601 conforming strings\n\n0.3.0 (2009-1-05)\n\
        ------------------\n\n- Initial release\n\nTODOs\n=====\n\nThis to do list\
        \ contains some thoughts and ideas about missing features, and\nparts to think\
        \ about, whether to implement them or not. This list is probably\nnot complete.\n\
        \nMissing features:\n-----------------\n\n    * time formating does not allow\
        \ to create fractional representations.\n    * parser for ISO intervals.\n\
        \    * currently microseconds are always padded to a length of 6 characters.\n\
        \      trailing 0s should be optional\n\nDocumentation:\n--------------\n\n\
        \    * parse_datetime:\n       - complete documentation to show what this\
        \ function allows, but ISO forbids.\n         and vice verse.\n       - support\
        \ other separators between date and time than 'T'\n\n    * parse_date:\n \
        \      - yeardigits should be always greater than 4\n       - dates before\
        \ 0001-01-01 are not supported\n\n    * parse_duration:\n       - alternative\
        \ formats are not fully supported due to parse_date restrictions\n       -\
        \ standard duration format is fully supported but not very restrictive.\n\n\
        \    * Duration:\n       - support fractional years and month in calculations\n\
        \       - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n\
        \       - refactor to have duration mathematics only at one place.\n     \
        \  - localize __str__ method (does timedelta do this?)\n       - when is a\
        \ Duration negative?\n       - normalize Durations. months [00-12] and years\
        \ ]-inf,+inf[\n\n\n"
  - file: isodate/isodate-0.6.1.tar.gz
    attributes:
      metadata_version: '2.1'
      name: isodate
      version: 0.6.1
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formatter
      home_page: https://github.com/gweis/isodate/
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: BSD License", "Operating System :: OS Independent",
        "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming
        Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming
        Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming
        Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming
        Language :: Python :: 3.10", "Programming Language :: Python :: Implementation
        :: PyPy", "Topic :: Internet", "Topic :: Software Development :: Libraries
        :: Python Modules"]'
      description: "\nISO 8601 date/time parser\n=========================\n\n.. image::\
        \ https://travis-ci.org/gweis/isodate.svg?branch=master\n    :target: https://travis-ci.org/gweis/isodate\n\
        \    :alt: Travis-CI\n.. image:: https://coveralls.io/repos/gweis/isodate/badge.svg?branch=master\n\
        \    :target: https://coveralls.io/r/gweis/isodate?branch=master\n    :alt:\
        \ Coveralls\n.. image:: https://img.shields.io/pypi/v/isodate.svg\n    :target:\
        \ https://pypi.python.org/pypi/isodate/          \n    :alt: Latest Version\n\
        .. image:: https://img.shields.io/pypi/l/isodate.svg\n    :target: https://pypi.python.org/pypi/isodate/\
        \          \n    :alt: License\n\n\nThis module implements ISO 8601 date,\
        \ time and duration parsing.\nThe implementation follows ISO8601:2004 standard,\
        \ and implements only\ndate/time representations mentioned in the standard.\
        \ If something is not\nmentioned there, then it is treated as non existent,\
        \ and not as an allowed\noption.\n\nFor instance, ISO8601:2004 never mentions\
        \ 2 digit years. So, it is not\nintended by this module to support 2 digit\
        \ years. (while it may still\nbe valid as ISO date, because it is not explicitly\
        \ forbidden.)\nAnother example is, when no time zone information is given\
        \ for a time,\nthen it should be interpreted as local time, and not UTC.\n\
        \nAs this module maps ISO 8601 dates/times to standard Python data types,\
        \ like\n*date*, *time*, *datetime* and *timedelta*, it is not possible to\
        \ convert\nall possible ISO 8601 dates/times. For instance, dates before 0001-01-01\
        \ are\nnot allowed by the Python *date* and *datetime* classes. Additionally\n\
        fractional seconds are limited to microseconds. That means if the parser finds\n\
        for instance nanoseconds it will round it to microseconds.\n\nDocumentation\n\
        -------------\n\nCurrently there are four parsing methods available.\n   *\
        \ parse_time:\n        parses an ISO 8601 time string into a *time* object\n\
        \   * parse_date:\n        parses an ISO 8601 date string into a *date* object\n\
        \   * parse_datetime:\n        parses an ISO 8601 date-time string into a\
        \ *datetime* object\n   * parse_duration:\n        parses an ISO 8601 duration\
        \ string into a *timedelta* or *Duration*\n        object.\n   * parse_tzinfo:\n\
        \        parses the time zone info part of an ISO 8601 string into a\n   \
        \     *tzinfo* object.\n\nAs ISO 8601 allows to define durations in years\
        \ and months, and *timedelta*\ndoes not handle years and months, this module\
        \ provides a *Duration* class,\nwhich can be used almost like a *timedelta*\
        \ object (with some limitations).\nHowever, a *Duration* object can be converted\
        \ into a *timedelta* object.\n\nThere are also ISO formatting methods for\
        \ all supported data types. Each\n*xxx_isoformat* method accepts a format\
        \ parameter. The default format is\nalways the ISO 8601 expanded format. This\
        \ is the same format used by\n*datetime.isoformat*:\n\n    * time_isoformat:\n\
        \        Intended to create ISO time strings with default format\n       \
        \ *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended to create ISO date\
        \ strings with default format\n        *yyyy-mm-dd*.\n    * datetime_isoformat:\n\
        \        Intended to create ISO date-time strings with default format\n  \
        \      *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n        Intended\
        \ to create ISO duration strings with default format\n        *PnnYnnMnnDTnnHnnMnnS*.\n\
        \    * tz_isoformat:\n        Intended to create ISO time zone strings with\
        \ default format\n        *hh:mm*.\n    * strftime:\n        A re-implementation\
        \ mostly compatible with Python's *strftime*, but\n        supports only those\
        \ format strings, which can also be used for dates\n        prior 1900. This\
        \ method also understands how to format *datetime* and\n        *Duration*\
        \ instances.\n\nInstallation:\n-------------\n\nThis module can easily be\
        \ installed with Python standard installation methods.\n\nEither use *python\
        \ setup.py install* or in case you have *setuptools* or\n*distribute* available,\
        \ you can also use *easy_install*.\n\nLimitations:\n------------\n\n   * The\
        \ parser accepts several date/time representation which should be invalid\n\
        \     according to ISO 8601 standard.\n\n     1. for date and time together,\
        \ this parser accepts a mixture of basic and extended format.\n        e.g.\
        \ the date could be in basic format, while the time is accepted in extended\
        \ format.\n        It also allows short dates and times in date-time strings.\n\
        \     2. For incomplete dates, the first day is chosen. e.g. 19th century\
        \ results in a date of\n        1901-01-01.\n     3. negative *Duration* and\
        \ *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script,\nwhich can be used to run the unit\
        \ tests included.\n\nSource code is available at `<http://github.com/gweis/isodate>`_.\n\
        \nCHANGES\n=======\n\n0.6.1 (2021-12-13)\n------------------\n\n- support\
        \ python 3.10 ()\n- last version to support py 2.7\n\n\n0.6.0 (2017-10-13)\n\
        ------------------\n\n- support incomplete month date (Fabien Loffredo)\n\
        - rely on duck typing when doing duration maths\n- support ':' as separator\
        \ in fractional time zones (usrenmae)\n\n\n0.5.4 (2015-08-06)\n------------------\n\
        \n- Fix parsing of Periods (Fabien Bochu)\n- Make Duration objects hashable\
        \ (Geoffrey Fairchild)\n- Add multiplication to duration (Reinoud Elhorst)\n\
        \n\n0.5.1 (2014-11-07)\n------------------\n\n- fixed pickling of Duration\
        \ objects\n- raise ISO8601Error when there is no 'T' separator in datetime\
        \ strings (Adrian Coveney)\n\n\n0.5.0 (2014-02-23)\n------------------\n\n\
        - ISO8601Error are subclasses of ValueError now (Michael Hrivnak)\n- improve\
        \ compatibility across various python variants and versions\n- raise exceptions\
        \ when using fractional years and months in date\n  maths with durations\n\
        - renamed method todatetime on Duraction objects to totimedelta\n\n\n0.4.9\
        \ (2012-10-30)\n------------------\n\n- support pickling FixedOffset instances\n\
        - make sure parsed fractional seconds are in microseconds\n- add leading zeros\
        \ when formattig microseconds (Jarom Loveridge)\n\n\n0.4.8 (2012-05-04)\n\
        ------------------\n\n- fixed incompatibility of unittests with python 2.5\
        \ and 2.6 (runs fine on 2.7\n  and 3.2)\n\n\n0.4.7 (2012-01-26)\n------------------\n\
        \n- fixed tzinfo formatting (never pass None into tzinfo.utcoffset())\n\n\n\
        0.4.6 (2012-01-06)\n------------------\n\n- added Python 3 compatibility via\
        \ 2to3\n\n0.4.5 (2012-01-06)\n------------------\n\n- made setuptools dependency\
        \ optional\n\n0.4.4 (2011-04-16)\n------------------\n\n- Fixed formatting\
        \ of microseconds for datetime objects\n\n0.4.3 (2010-10-29)\n------------------\n\
        \n- Fixed problem with %P formating and fractions (supplied by David Brooks)\n\
        \n0.4.2 (2010-10-28)\n------------------\n\n- Implemented unary - for Duration\
        \ (supplied by David Brooks)\n- Output fractional seconds with '%P' format.\
        \ (partly supplied by David Brooks)\n\n0.4.1 (2010-10-13)\n------------------\n\
        \n- fixed bug in comparison between timedelta and Duration.\n- fixed precision\
        \ problem with microseconds (reported by Tommi Virtanen)\n\n0.4.0 (2009-02-09)\n\
        ------------------\n\n- added method to parse ISO 8601 time zone strings\n\
        - added methods to create ISO 8601 conforming strings\n\n0.3.0 (2009-1-05)\n\
        ------------------\n\n- Initial release\n\nTODOs\n=====\n\nThis to do list\
        \ contains some thoughts and ideas about missing features, and\nparts to think\
        \ about, whether to implement them or not. This list is probably\nnot complete.\n\
        \nMissing features:\n-----------------\n\n    * time formating does not allow\
        \ to create fractional representations.\n    * parser for ISO intervals.\n\
        \    * currently microseconds are always padded to a length of 6 characters.\n\
        \      trailing 0s should be optional\n\nDocumentation:\n--------------\n\n\
        \    * parse_datetime:\n       - complete documentation to show what this\
        \ function allows, but ISO forbids.\n         and vice verse.\n       - support\
        \ other separators between date and time than 'T'\n\n    * parse_date:\n \
        \      - yeardigits should be always greater than 4\n       - dates before\
        \ 0001-01-01 are not supported\n\n    * parse_duration:\n       - alternative\
        \ formats are not fully supported due to parse_date restrictions\n       -\
        \ standard duration format is fully supported but not very restrictive.\n\n\
        \    * Duration:\n       - support fractional years and month in calculations\n\
        \       - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n\
        \       - refactor to have duration mathematics only at one place.\n     \
        \  - localize __str__ method (does timedelta do this?)\n       - when is a\
        \ Duration negative?\n       - normalize Durations. months [00-12] and years\
        \ ]-inf,+inf[\n\n\n"
  - file: isodate/isodate-0.4.8.tar.gz
    attributes:
      metadata_version: '1.0'
      name: isodate
      version: 0.4.8
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: "ISO 8601 date/time parser\n=========================\n\nThis module\
        \ implements ISO 8601 date, time and duration parsing.\nThe implementation\
        \ follows ISO8601:2004 standard, and implements only\ndate/time representations\
        \ mentioned in the standard. If something is not\nmentioned there, then it\
        \ is treated as non existent, and not as an allowed\noption.\n\nFor instance,\
        \ ISO8601:2004 never mentions 2 digit years. So, it is not\nintended by this\
        \ module to support 2 digit years. (while it may still\nbe valid as ISO date,\
        \ because it is not explicitly forbidden.)\nAnother example is, when no time\
        \ zone information is given for a time,\nthen it should be interpreted as\
        \ local time, and not UTC.\n\nAs this module maps ISO 8601 dates/times to\
        \ standard Python data types, like\n*date*, *time*, *datetime* and *timedelta*,\
        \ it is not possible to convert\nall possible ISO 8601 dates/times. For instance,\
        \ dates before 0001-01-01 are\nnot allowed by the Python *date* and *datetime*\
        \ classes. Additionally\nfractional seconds are limited to microseconds. That\
        \ means if the parser finds\nfor instance nanoseconds it will round it to\
        \ microseconds.\n\nDocumentation\n-------------\n\nCurrently there are four\
        \ parsing methods available.\n   * parse_time:\n        parses an ISO 8601\
        \ time string into a *time* object\n   * parse_date:\n        parses an ISO\
        \ 8601 date string into a *date* object\n   * parse_datetime:\n        parses\
        \ an ISO 8601 date-time string into a *datetime* object\n   * parse_duration:\n\
        \        parses an ISO 8601 duration string into a *timedelta* or *Duration*\n\
        \        object.\n   * parse_tzinfo:\n        parses the time zone info part\
        \ of an ISO 8601 string into a\n        *tzinfo* object.\n\nAs ISO 8601 allows\
        \ to define durations in years and months, and *timedelta*\ndoes not handle\
        \ years and months, this module provides a *Duration* class,\nwhich can be\
        \ used almost like a *timedelta* object (with some limitations).\nHowever,\
        \ a *Duration* object can be converted into a *timedelta* object.\n\nThere\
        \ are also ISO formating methods for all supported data types. Each\n*xxx_isoformat*\
        \ method accepts a format parameter. The default format is\nalways the ISO\
        \ 8601 expanded format. This is the same format used by\n*datetime.isoformat*:\n\
        \n    * time_isoformat:\n        Intended to create ISO time strings with\
        \ default format\n        *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended\
        \ to create ISO date strings with default format\n        *yyyy-mm-dd*.\n\
        \    * datetime_isoformat:\n        Intended to create ISO date-time strings\
        \ with default format\n        *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n\
        \        Intended to create ISO duration strings with default format\n   \
        \     *PnnYnnMnnDTnnHnnMnnS*.\n    * tz_isoformat:\n        Intended to create\
        \ ISO time zone strings with default format\n        *hh:mm*.\n    * strftime:\n\
        \        A re-implementation mostly compatible with Python's *strftime*, but\n\
        \        supports only those format strings, which can also be used for dates\n\
        \        prior 1900. This method also understands how to format *datetime*\
        \ and\n        *Duration* instances.\n\nInstallation:\n-------------\n\nThis\
        \ module can easily be installed with Python standard installation methods.\n\
        \nEither use *python setup.py install* or in case you have *setuptools* or\n\
        *distribute* available, you can also use *easy_install*.\n\nLimitations:\n\
        ------------\n\n   * The parser accepts several date/time representation which\
        \ should be invalid\n     according to ISO 8601 standard.\n\n     1. for date\
        \ and time together, this parser accepts a mixture of basic and extended format.\n\
        \        e.g. the date could be in basic format, while the time is accepted\
        \ in extended format.\n        It also allows short dates and times in date-time\
        \ strings.\n     2. For incomplete dates, the first day is chosen. e.g. 19th\
        \ century results in a date of\n        1901-01-01.\n     3. negative *Duration*\
        \ and *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script and a *buildout.cfg*. Both can\nbe\
        \ used to run the unit tests included.\n\nSource code is available at `<http://hg.proclos.com/isodate>`_.\n\
        \n\nCHANGES\n=======\n\n0.4.8 (2012-05-04)\n------------------\n\n- fixed\
        \ incompatibility of unittests with python 2.5 and 2.6 (runs fine on 2.7\n\
        \  and 3.2)\n\n\n0.4.7 (2012-01-26)\n------------------\n\n- fixed tzinfo\
        \ formatting (never pass None into tzinfo.utcoffset())\n\n\n0.4.6 (2012-01-06)\n\
        ------------------\n\n- added Python 3 compatibility via 2to3\n\n0.4.5 (2012-01-06)\n\
        ------------------\n\n- made setuptools dependency optional\n\n0.4.4 (2011-04-16)\n\
        ------------------\n\n- Fixed formatting of microseconds for datetime objects\n\
        \n0.4.3 (2010-10-29)\n------------------\n\n- Fixed problem with %P formating\
        \ and fractions (supplied by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\
        \n- Implemented unary - for Duration (supplied by David Brooks)\n- Output\
        \ fractional seconds with '%P' format. (partly supplied by David Brooks)\n\
        \n0.4.1 (2010-10-13)\n------------------\n\n- fixed bug in comparison between\
        \ timedelta and Duration.\n- fixed precision problem with microseconds (reported\
        \ by Tommi Virtanen)\n\n0.4.0 (2009-02-09)\n------------------\n\n- added\
        \ method to parse ISO 8601 time zone strings\n- added methods to create ISO\
        \ 8601 conforming strings\n\n0.3.0 (2009-1-05)\n------------------\n\n- Initial\
        \ release\n\nTODOs\n=====\n\nThis to do list contains some thoughts and ideas\
        \ about missing features, and\nparts to think about, whether to implement\
        \ them or not. This list is probably\nnot complete.\n\nMissing features:\n\
        -----------------\n\n    * time formating does not allow to create fractional\
        \ representations.\n    * parser for ISO intervals.\n    * currently microseconds\
        \ are always padded to a length of 6 characters.\n      trailing 0s should\
        \ be optional\n\nDocumentation:\n--------------\n\n    * parse_datetime:\n\
        \       - complete documentation to show what this function allows, but ISO\
        \ forbids.\n         and vice verse.\n       - support other separators between\
        \ date and time than 'T'\n\n    * parse_date:\n       - yeardigits should\
        \ be always greater than 4\n       - dates before 0001-01-01 are not supported\n\
        \n    * parse_duration:\n       - alternative formats are not fully supported\
        \ due to parse_date restrictions\n       - standard duration format is fully\
        \ supported but not very restrictive.\n\n    * Duration:\n       - support\
        \ fractional years and month in calculations\n       - implement w3c order\
        \ relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n    \
        \   - refactor to have duration mathematics only at one place.\n       - localize\
        \ __str__ method (does timedelta do this?)\n       - when is a Duration negative?\n\
        \       - normalize Durations. months [00-12] and years ]-inf,+inf["
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
  - file: isodate/isodate-0.5.1.tar.gz
    attributes:
      metadata_version: '1.1'
      name: isodate
      version: 0.5.1
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: "ISO 8601 date/time parser\n=========================\n\n.. image::\
        \ https://travis-ci.org/gweis/isodate.png?branch=master\n    :target: https://travis-ci.org/gweis/isodate\n\
        \    :alt: Travis-CI\n.. image:: https://coveralls.io/repos/gweis/isodate/badge.png?branch=master\n\
        \    :target: https://coveralls.io/r/gweis/isodate?branch=master\n    :alt:\
        \ Coveralls\n.. image:: https://pypip.in/v/isodate/badge.png\n    :target:\
        \ https://pypi.python.org/pypi/isodate/\n    :alt: Latest Version\n.. image::\
        \ https://pypip.in/d/isodate/badge.png\n    :target: https://pypi.python.org/pypi//isodate/\n\
        \    :alt: Downloads\n.. image:: https://pypip.in/license/isodate/badge.png\n\
        \    :target: https://pypi.python.org/pypi/isodate/\n    :alt: License\n\n\
        \nThis module implements ISO 8601 date, time and duration parsing.\nThe implementation\
        \ follows ISO8601:2004 standard, and implements only\ndate/time representations\
        \ mentioned in the standard. If something is not\nmentioned there, then it\
        \ is treated as non existent, and not as an allowed\noption.\n\nFor instance,\
        \ ISO8601:2004 never mentions 2 digit years. So, it is not\nintended by this\
        \ module to support 2 digit years. (while it may still\nbe valid as ISO date,\
        \ because it is not explicitly forbidden.)\nAnother example is, when no time\
        \ zone information is given for a time,\nthen it should be interpreted as\
        \ local time, and not UTC.\n\nAs this module maps ISO 8601 dates/times to\
        \ standard Python data types, like\n*date*, *time*, *datetime* and *timedelta*,\
        \ it is not possible to convert\nall possible ISO 8601 dates/times. For instance,\
        \ dates before 0001-01-01 are\nnot allowed by the Python *date* and *datetime*\
        \ classes. Additionally\nfractional seconds are limited to microseconds. That\
        \ means if the parser finds\nfor instance nanoseconds it will round it to\
        \ microseconds.\n\nDocumentation\n-------------\n\nCurrently there are four\
        \ parsing methods available.\n   * parse_time:\n        parses an ISO 8601\
        \ time string into a *time* object\n   * parse_date:\n        parses an ISO\
        \ 8601 date string into a *date* object\n   * parse_datetime:\n        parses\
        \ an ISO 8601 date-time string into a *datetime* object\n   * parse_duration:\n\
        \        parses an ISO 8601 duration string into a *timedelta* or *Duration*\n\
        \        object.\n   * parse_tzinfo:\n        parses the time zone info part\
        \ of an ISO 8601 string into a\n        *tzinfo* object.\n\nAs ISO 8601 allows\
        \ to define durations in years and months, and *timedelta*\ndoes not handle\
        \ years and months, this module provides a *Duration* class,\nwhich can be\
        \ used almost like a *timedelta* object (with some limitations).\nHowever,\
        \ a *Duration* object can be converted into a *timedelta* object.\n\nThere\
        \ are also ISO formating methods for all supported data types. Each\n*xxx_isoformat*\
        \ method accepts a format parameter. The default format is\nalways the ISO\
        \ 8601 expanded format. This is the same format used by\n*datetime.isoformat*:\n\
        \n    * time_isoformat:\n        Intended to create ISO time strings with\
        \ default format\n        *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended\
        \ to create ISO date strings with default format\n        *yyyy-mm-dd*.\n\
        \    * datetime_isoformat:\n        Intended to create ISO date-time strings\
        \ with default format\n        *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n\
        \        Intended to create ISO duration strings with default format\n   \
        \     *PnnYnnMnnDTnnHnnMnnS*.\n    * tz_isoformat:\n        Intended to create\
        \ ISO time zone strings with default format\n        *hh:mm*.\n    * strftime:\n\
        \        A re-implementation mostly compatible with Python's *strftime*, but\n\
        \        supports only those format strings, which can also be used for dates\n\
        \        prior 1900. This method also understands how to format *datetime*\
        \ and\n        *Duration* instances.\n\nInstallation:\n-------------\n\nThis\
        \ module can easily be installed with Python standard installation methods.\n\
        \nEither use *python setup.py install* or in case you have *setuptools* or\n\
        *distribute* available, you can also use *easy_install*.\n\nLimitations:\n\
        ------------\n\n   * The parser accepts several date/time representation which\
        \ should be invalid\n     according to ISO 8601 standard.\n\n     1. for date\
        \ and time together, this parser accepts a mixture of basic and extended format.\n\
        \        e.g. the date could be in basic format, while the time is accepted\
        \ in extended format.\n        It also allows short dates and times in date-time\
        \ strings.\n     2. For incomplete dates, the first day is chosen. e.g. 19th\
        \ century results in a date of\n        1901-01-01.\n     3. negative *Duration*\
        \ and *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script and a *buildout.cfg*. Both can\nbe\
        \ used to run the unit tests included.\n\nSource code is available at `<http://github.com/gweis/isodate>`_.\n\
        \nCHANGES\n=======\n\n0.5.1 (2014-11-07)\n------------------\n\n- fixed pickling\
        \ of Duration objects\n- raise ISO8601Error when there is no 'T' separator\
        \ in datetime strings (Adrian Coveney)\n\n\n0.5.0 (2014-02-23)\n------------------\n\
        \n- ISO8601Error are subclasses of ValueError now (Michael Hrivnak)\n- improve\
        \ compatibility across various python variants and versions\n- raise exceptions\
        \ when using fractional years and months in date\n  maths with durations\n\
        - renamed method todatetime on Duraction objects to totimedelta\n\n\n0.4.9\
        \ (2012-10-30)\n------------------\n\n- support pickling FixedOffset instances\n\
        - make sure parsed fractional seconds are in microseconds\n- add leading zeros\
        \ when formattig microseconds (Jarom Loveridge)\n\n\n0.4.8 (2012-05-04)\n\
        ------------------\n\n- fixed incompatibility of unittests with python 2.5\
        \ and 2.6 (runs fine on 2.7\n  and 3.2)\n\n\n0.4.7 (2012-01-26)\n------------------\n\
        \n- fixed tzinfo formatting (never pass None into tzinfo.utcoffset())\n\n\n\
        0.4.6 (2012-01-06)\n------------------\n\n- added Python 3 compatibility via\
        \ 2to3\n\n0.4.5 (2012-01-06)\n------------------\n\n- made setuptools dependency\
        \ optional\n\n0.4.4 (2011-04-16)\n------------------\n\n- Fixed formatting\
        \ of microseconds for datetime objects\n\n0.4.3 (2010-10-29)\n------------------\n\
        \n- Fixed problem with %P formating and fractions (supplied by David Brooks)\n\
        \n0.4.2 (2010-10-28)\n------------------\n\n- Implemented unary - for Duration\
        \ (supplied by David Brooks)\n- Output fractional seconds with '%P' format.\
        \ (partly supplied by David Brooks)\n\n0.4.1 (2010-10-13)\n------------------\n\
        \n- fixed bug in comparison between timedelta and Duration.\n- fixed precision\
        \ problem with microseconds (reported by Tommi Virtanen)\n\n0.4.0 (2009-02-09)\n\
        ------------------\n\n- added method to parse ISO 8601 time zone strings\n\
        - added methods to create ISO 8601 conforming strings\n\n0.3.0 (2009-1-05)\n\
        ------------------\n\n- Initial release\n\nTODOs\n=====\n\nThis to do list\
        \ contains some thoughts and ideas about missing features, and\nparts to think\
        \ about, whether to implement them or not. This list is probably\nnot complete.\n\
        \nMissing features:\n-----------------\n\n    * time formating does not allow\
        \ to create fractional representations.\n    * parser for ISO intervals.\n\
        \    * currently microseconds are always padded to a length of 6 characters.\n\
        \      trailing 0s should be optional\n\nDocumentation:\n--------------\n\n\
        \    * parse_datetime:\n       - complete documentation to show what this\
        \ function allows, but ISO forbids.\n         and vice verse.\n       - support\
        \ other separators between date and time than 'T'\n\n    * parse_date:\n \
        \      - yeardigits should be always greater than 4\n       - dates before\
        \ 0001-01-01 are not supported\n\n    * parse_duration:\n       - alternative\
        \ formats are not fully supported due to parse_date restrictions\n       -\
        \ standard duration format is fully supported but not very restrictive.\n\n\
        \    * Duration:\n       - support fractional years and month in calculations\n\
        \       - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n\
        \       - refactor to have duration mathematics only at one place.\n     \
        \  - localize __str__ method (does timedelta do this?)\n       - when is a\
        \ Duration negative?\n       - normalize Durations. months [00-12] and years\
        \ ]-inf,+inf["
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: BSD License", "Operating System :: OS Independent",
        "Programming Language :: Python", "Programming Language :: Python :: 2.6",
        "Programming Language :: Python :: 2.7", "Programming Language :: Python ::
        3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python
        :: 3.4", "Programming Language :: Python :: Implementation :: PyPy", "Topic
        :: Internet", "Topic :: Software Development :: Libraries :: Python Modules"]'
  - file: isodate/isodate-0.4.6.tar.gz
    attributes:
      metadata_version: '1.0'
      name: isodate
      version: 0.4.6
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: "ISO 8601 date/time parser\n=========================\n\nThis module\
        \ implements ISO 8601 date, time and duration parsing.\nThe implementation\
        \ follows ISO8601:2004 standard, and implements only\ndate/time representations\
        \ mentioned in the standard. If something is not\nmentioned there, then it\
        \ is treated as non existent, and not as an allowed\noption.\n\nFor instance,\
        \ ISO8601:2004 never mentions 2 digit years. So, it is not\nintended by this\
        \ module to support 2 digit years. (while it may still\nbe valid as ISO date,\
        \ because it is not explicitly forbidden.)\nAnother example is, when no time\
        \ zone information is given for a time,\nthen it should be interpreted as\
        \ local time, and not UTC.\n\nAs this module maps ISO 8601 dates/times to\
        \ standard Python data types, like\n*date*, *time*, *datetime* and *timedelta*,\
        \ it is not possible to convert\nall possible ISO 8601 dates/times. For instance,\
        \ dates before 0001-01-01 are\nnot allowed by the Python *date* and *datetime*\
        \ classes. Additionally\nfractional seconds are limited to microseconds. That\
        \ means if the parser finds\nfor instance nanoseconds it will round it to\
        \ microseconds.\n\nDocumentation\n-------------\n\nCurrently there are four\
        \ parsing methods available.\n   * parse_time:\n        parses an ISO 8601\
        \ time string into a *time* object\n   * parse_date:\n        parses an ISO\
        \ 8601 date string into a *date* object\n   * parse_datetime:\n        parses\
        \ an ISO 8601 date-time string into a *datetime* object\n   * parse_duration:\n\
        \        parses an ISO 8601 duration string into a *timedelta* or *Duration*\n\
        \        object.\n   * parse_tzinfo:\n        parses the time zone info part\
        \ of an ISO 8601 string into a\n        *tzinfo* object.\n\nAs ISO 8601 allows\
        \ to define durations in years and months, and *timedelta*\ndoes not handle\
        \ years and months, this module provides a *Duration* class,\nwhich can be\
        \ used almost like a *timedelta* object (with some limitations).\nHowever,\
        \ a *Duration* object can be converted into a *timedelta* object.\n\nThere\
        \ are also ISO formating methods for all supported data types. Each\n*xxx_isoformat*\
        \ method accepts a format parameter. The default format is\nalways the ISO\
        \ 8601 expanded format. This is the same format used by\n*datetime.isoformat*:\n\
        \n    * time_isoformat:\n        Intended to create ISO time strings with\
        \ default format\n        *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended\
        \ to create ISO date strings with default format\n        *yyyy-mm-dd*.\n\
        \    * datetime_isoformat:\n        Intended to create ISO date-time strings\
        \ with default format\n        *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n\
        \        Intended to create ISO duration strings with default format\n   \
        \     *PnnYnnMnnDTnnHnnMnnS*.\n    * tz_isoformat:\n        Intended to create\
        \ ISO time zone strings with default format\n        *hh:mm*.\n    * strftime:\n\
        \        A re-implementation mostly compatible with Python's *strftime*, but\n\
        \        supports only those format strings, which can also be used for dates\n\
        \        prior 1900. This method also understands how to format *datetime*\
        \ and\n        *Duration* instances.\n\nInstallation:\n-------------\n\nThis\
        \ module can easily be installed with Python standard installation methods.\n\
        \nEither use *python setup.py install* or in case you have *setuptools* or\n\
        *distribute* available, you can also use *easy_install*.\n\nLimitations:\n\
        ------------\n\n   * The parser accepts several date/time representation which\
        \ should be invalid\n     according to ISO 8601 standard.\n\n     1. for date\
        \ and time together, this parser accepts a mixture of basic and extended format.\n\
        \        e.g. the date could be in basic format, while the time is accepted\
        \ in extended format.\n        It also allows short dates and times in date-time\
        \ strings.\n     2. For incomplete dates, the first day is chosen. e.g. 19th\
        \ century results in a date of\n        1901-01-01.\n     3. negative *Duration*\
        \ and *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script and a *buildout.cfg*. Both can\nbe\
        \ used to run the unit tests included.\n\nSource code is available at `<http://hg.proclos.com/isodate>`_.\n\
        \n\nCHANGES\n=======\n\n0.4.6 (2012-01-06)\n------------------\n\n- added\
        \ Python 3 compatibility via 2to3\n\n0.4.5 (2012-01-06)\n------------------\n\
        \n- made setuptools dependency optional\n\n0.4.4 (2011-04-16)\n------------------\n\
        \n- Fixed formatting of microseconds for datetime objects\n\n0.4.3 (2010-10-29)\n\
        ------------------\n\n- Fixed problem with %P formating and fractions (supplied\
        \ by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\n- Implemented\
        \ unary - for Duration (supplied by David Brooks)\n- Output fractional seconds\
        \ with '%P' format. (partly supplied by David Brooks)\n\n0.4.1 (2010-10-13)\n\
        ------------------\n\n- fixed bug in comparison between timedelta and Duration.\n\
        - fixed precision problem with microseconds (reported by Tommi Virtanen)\n\
        \n0.4.0 (2009-02-09)\n------------------\n\n- added method to parse ISO 8601\
        \ time zone strings\n- added methods to create ISO 8601 conforming strings\n\
        \n0.3.0 (2009-1-05)\n------------------\n\n- Initial release\n\nTODOs\n=====\n\
        \nThis to do list contains some thoughts and ideas about missing features,\
        \ and\nparts to think about, whether to implement them or not. This list is\
        \ probably\nnot complete.\n\nMissing features:\n-----------------\n\n    *\
        \ time formating does not allow to create fractional representations.\n  \
        \  * parser for ISO intervals.\n    * currently microseconds are always padded\
        \ to a length of 6 characters.\n      trailing 0s should be optional\n\nDocumentation:\n\
        --------------\n\n    * parse_datetime:\n       - complete documentation to\
        \ show what this function allows, but ISO forbids.\n         and vice verse.\n\
        \       - support other separators between date and time than 'T'\n\n    *\
        \ parse_date:\n       - yeardigits should be always greater than 4\n     \
        \  - dates before 0001-01-01 are not supported\n\n    * parse_duration:\n\
        \       - alternative formats are not fully supported due to parse_date restrictions\n\
        \       - standard duration format is fully supported but not very restrictive.\n\
        \n    * Duration:\n       - support fractional years and month in calculations\n\
        \       - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n\
        \       - refactor to have duration mathematics only at one place.\n     \
        \  - localize __str__ method (does timedelta do this?)\n       - when is a\
        \ Duration negative?\n       - normalize Durations. months [00-12] and years\
        \ ]-inf,+inf["
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
  - file: isodate/isodate-0.4.2.tar.gz
    attributes:
      metadata_version: '1.0'
      name: isodate
      version: 0.4.2
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: 'ISO 8601 date/time parser

        =========================


        This module implements ISO 8601 date, time and duration parsing.

        The implementation follows ISO8601:2004 standard, and implements only

        date/time representations mentioned in the standard. If something is not

        mentioned there, then it is treated as non existent, and not as an allowed

        option.


        For instance, ISO8601:2004 never mentions 2 digit years. So, it is not

        intended by this module to support 2 digit years. (while it may still

        be valid as ISO date, because it is not explicitly forbidden.)

        Another example is, when no time zone information is given for a time,

        then it should be interpreted as local time, and not UTC.


        As this module maps ISO 8601 dates/times to standard Python data types, like

        *date*, *time*, *datetime* and *timedelta*, it is not possible to convert

        all possible ISO 8601 dates/times. For instance, dates before 0001-01-01 are

        not allowed by the Python *date* and *datetime* classes. Additionally

        fractional seconds are limited to microseconds. That means if the parser finds

        for instance nanoseconds it will round it to microseconds.


        Documentation

        -------------


        Currently there are four parsing methods available.

        * parse_time:

        parses an ISO 8601 time string into a *time* object

        * parse_date:

        parses an ISO 8601 date string into a *date* object

        * parse_datetime:

        parses an ISO 8601 date-time string into a *datetime* object

        * parse_duration:

        parses an ISO 8601 duration string into a *timedelta* or *Duration*

        object.

        * parse_tzinfo:

        parses the time zone info part of an ISO 8601 string into a

        *tzinfo* object.


        As ISO 8601 allows to define durations in years and months, and *timedelta*

        does not handle years and months, this module provides a *Duration* class,

        which can be used almost like a *timedelta* object (with some limitations).

        However, a *Duration* object can be converted into a *timedelta* object.


        There are also ISO formating methods for all supported data types. Each

        *xxx_isoformat* method accepts a format parameter. The default format is

        always the ISO 8601 expanded format. This is the same format used by

        *datetime.isoformat*:


        * time_isoformat:

        Intended to create ISO time strings with default format

        *hh:mm:ssZ*.

        * date_isoformat:

        Intended to create ISO date strings with default format

        *yyyy-mm-dd*.

        * datetime_isoformat:

        Intended to create ISO date-time strings with default format

        *yyyy-mm-ddThh:mm:ssZ*.

        * duration_isoformat:

        Intended to create ISO duration strings with default format

        *PnnYnnMnnDTnnHnnMnnS*.

        * tz_isoformat:

        Intended to create ISO time zone strings with default format

        *hh:mm*.

        * strftime:

        A re-implementation mostly compatible with Python''s *strftime*, but

        supports only those format strings, which can also be used for dates

        prior 1900. This method also understands how to format *datetime* and

        *Duration* instances.


        Installation:

        -------------


        This module can easily be installed with Python standard installation methods.

        Just use *setuptools* or *easy_install* as usual.


        Limitations:

        ------------


        * The parser accepts several date/time representation which should be invalid

        according to ISO 8601 standard.


        1. for date and time together, this parser accepts a mixture of basic and
        extended format.

        e.g. the date could be in basic format, while the time is accepted in extended
        format.

        It also allows short dates and times in date-time strings.

        2. For incomplete dates, the first day is chosen. e.g. 19th century results
        in a date of

        1901-01-01.

        3. negative *Duration* and *timedelta* value are not fully supported yet.


        Further information:

        --------------------


        The doc strings and unit tests should provide rather detailed information
        about

        the methods and their limitations.


        The source release provides a *setup.py* script and a *buildout.cfg*. Both
        can

        be used to run the unit tests included.


        Source code is available at `<http://hg.proclos.com/isodate>`_.



        CHANGES

        =======


        0.4.2 (2010-10-28)

        ------------------


        - Implemented unary - for Duration (supplied by David Brooks)

        - Output fractional seconds with ''%P'' format. (partly supplied by David
        Brooks)


        0.4.1 (2010-10-13)

        ------------------


        - fixed bug in comparison between timedelta and Duration.

        - fixed precision problem with microseconds (reported by Tommi Virtanen)


        0.4.0 (2009-02-09)

        ------------------


        - added method to parse ISO 8601 time zone strings

        - added methods to create ISO 8601 conforming strings


        0.3.0 (2009-1-05)

        ------------------


        - Initial release



        TODOs

        =====


        This to do list contains some thoughts and ideas about missing features, and

        parts to think about, whether to implement them or not. This list is probably

        not complete.


        Missing features:

        -----------------


        * time formating does not allow to create fractional representations.

        * parser for ISO intervals.


        Documentation:

        --------------


        * parse_datetime:

        - complete documentation to show what this function allows, but ISO forbids.

        and vice verse.

        - support other separators between date and time than ''T''


        * parse_date:

        - yeardigits should be always greater than 4

        - dates before 0001-01-01 are not supported


        * parse_duration:

        - alternative formats are not fully supported due to parse_date restrictions

        - standard duration format is fully supported but not very restrictive.


        * Duration:

        - support fractional years and month in calculations

        - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)

        - refactor to have duration mathematics only at one place.

        - localize __str__ method (does timedelta do this?)

        - when is a Duration negative?

        - normalize Durations. months [00-12] and years ]-inf,+inf['
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
  - file: isodate/isodate-0.5.4.tar.gz
    attributes:
      metadata_version: '1.1'
      name: isodate
      version: 0.5.4
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formatter
      description: "ISO 8601 date/time parser\n=========================\n\n.. image::\
        \ https://travis-ci.org/gweis/isodate.svg?branch=master\n    :target: https://travis-ci.org/gweis/isodate\n\
        \    :alt: Travis-CI\n.. image:: https://coveralls.io/repos/gweis/isodate/badge.svg?branch=master\n\
        \    :target: https://coveralls.io/r/gweis/isodate?branch=master\n    :alt:\
        \ Coveralls\n.. image:: https://pypip.in/version/isodate/badge.svg\n    :target:\
        \ https://pypi.python.org/pypi/isodate/\n    :alt: Latest Version\n.. image::\
        \ https://pypip.in/download/isodate/badge.svg\n    :target: https://pypi.python.org/pypi/isodate/\n\
        \    :alt: Downloads\n.. image:: https://pypip.in/license/isodate/badge.svg\n\
        \    :target: https://pypi.python.org/pypi/isodate/\n    :alt: License\n\n\
        \nThis module implements ISO 8601 date, time and duration parsing.\nThe implementation\
        \ follows ISO8601:2004 standard, and implements only\ndate/time representations\
        \ mentioned in the standard. If something is not\nmentioned there, then it\
        \ is treated as non existent, and not as an allowed\noption.\n\nFor instance,\
        \ ISO8601:2004 never mentions 2 digit years. So, it is not\nintended by this\
        \ module to support 2 digit years. (while it may still\nbe valid as ISO date,\
        \ because it is not explicitly forbidden.)\nAnother example is, when no time\
        \ zone information is given for a time,\nthen it should be interpreted as\
        \ local time, and not UTC.\n\nAs this module maps ISO 8601 dates/times to\
        \ standard Python data types, like\n*date*, *time*, *datetime* and *timedelta*,\
        \ it is not possible to convert\nall possible ISO 8601 dates/times. For instance,\
        \ dates before 0001-01-01 are\nnot allowed by the Python *date* and *datetime*\
        \ classes. Additionally\nfractional seconds are limited to microseconds. That\
        \ means if the parser finds\nfor instance nanoseconds it will round it to\
        \ microseconds.\n\nDocumentation\n-------------\n\nCurrently there are four\
        \ parsing methods available.\n   * parse_time:\n        parses an ISO 8601\
        \ time string into a *time* object\n   * parse_date:\n        parses an ISO\
        \ 8601 date string into a *date* object\n   * parse_datetime:\n        parses\
        \ an ISO 8601 date-time string into a *datetime* object\n   * parse_duration:\n\
        \        parses an ISO 8601 duration string into a *timedelta* or *Duration*\n\
        \        object.\n   * parse_tzinfo:\n        parses the time zone info part\
        \ of an ISO 8601 string into a\n        *tzinfo* object.\n\nAs ISO 8601 allows\
        \ to define durations in years and months, and *timedelta*\ndoes not handle\
        \ years and months, this module provides a *Duration* class,\nwhich can be\
        \ used almost like a *timedelta* object (with some limitations).\nHowever,\
        \ a *Duration* object can be converted into a *timedelta* object.\n\nThere\
        \ are also ISO formatting methods for all supported data types. Each\n*xxx_isoformat*\
        \ method accepts a format parameter. The default format is\nalways the ISO\
        \ 8601 expanded format. This is the same format used by\n*datetime.isoformat*:\n\
        \n    * time_isoformat:\n        Intended to create ISO time strings with\
        \ default format\n        *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended\
        \ to create ISO date strings with default format\n        *yyyy-mm-dd*.\n\
        \    * datetime_isoformat:\n        Intended to create ISO date-time strings\
        \ with default format\n        *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n\
        \        Intended to create ISO duration strings with default format\n   \
        \     *PnnYnnMnnDTnnHnnMnnS*.\n    * tz_isoformat:\n        Intended to create\
        \ ISO time zone strings with default format\n        *hh:mm*.\n    * strftime:\n\
        \        A re-implementation mostly compatible with Python's *strftime*, but\n\
        \        supports only those format strings, which can also be used for dates\n\
        \        prior 1900. This method also understands how to format *datetime*\
        \ and\n        *Duration* instances.\n\nInstallation:\n-------------\n\nThis\
        \ module can easily be installed with Python standard installation methods.\n\
        \nEither use *python setup.py install* or in case you have *setuptools* or\n\
        *distribute* available, you can also use *easy_install*.\n\nLimitations:\n\
        ------------\n\n   * The parser accepts several date/time representation which\
        \ should be invalid\n     according to ISO 8601 standard.\n\n     1. for date\
        \ and time together, this parser accepts a mixture of basic and extended format.\n\
        \        e.g. the date could be in basic format, while the time is accepted\
        \ in extended format.\n        It also allows short dates and times in date-time\
        \ strings.\n     2. For incomplete dates, the first day is chosen. e.g. 19th\
        \ century results in a date of\n        1901-01-01.\n     3. negative *Duration*\
        \ and *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script and a *buildout.cfg*. Both can\nbe\
        \ used to run the unit tests included.\n\nSource code is available at `<http://github.com/gweis/isodate>`_.\n\
        \nCHANGES\n=======\n\n0.5.4 (2015-08-06)\n------------------\n\n- Fix parsing\
        \ of Periods (Fabien Bochu)\n- Make Duration objects hashable (Geoffrey Fairchild)\n\
        - Add multiplication to duration (Reinoud Elhorst)\n\n\n0.5.1 (2014-11-07)\n\
        ------------------\n\n- fixed pickling of Duration objects\n- raise ISO8601Error\
        \ when there is no 'T' separator in datetime strings (Adrian Coveney)\n\n\n\
        0.5.0 (2014-02-23)\n------------------\n\n- ISO8601Error are subclasses of\
        \ ValueError now (Michael Hrivnak)\n- improve compatibility across various\
        \ python variants and versions\n- raise exceptions when using fractional years\
        \ and months in date\n  maths with durations\n- renamed method todatetime\
        \ on Duraction objects to totimedelta\n\n\n0.4.9 (2012-10-30)\n------------------\n\
        \n- support pickling FixedOffset instances\n- make sure parsed fractional\
        \ seconds are in microseconds\n- add leading zeros when formattig microseconds\
        \ (Jarom Loveridge)\n\n\n0.4.8 (2012-05-04)\n------------------\n\n- fixed\
        \ incompatibility of unittests with python 2.5 and 2.6 (runs fine on 2.7\n\
        \  and 3.2)\n\n\n0.4.7 (2012-01-26)\n------------------\n\n- fixed tzinfo\
        \ formatting (never pass None into tzinfo.utcoffset())\n\n\n0.4.6 (2012-01-06)\n\
        ------------------\n\n- added Python 3 compatibility via 2to3\n\n0.4.5 (2012-01-06)\n\
        ------------------\n\n- made setuptools dependency optional\n\n0.4.4 (2011-04-16)\n\
        ------------------\n\n- Fixed formatting of microseconds for datetime objects\n\
        \n0.4.3 (2010-10-29)\n------------------\n\n- Fixed problem with %P formating\
        \ and fractions (supplied by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\
        \n- Implemented unary - for Duration (supplied by David Brooks)\n- Output\
        \ fractional seconds with '%P' format. (partly supplied by David Brooks)\n\
        \n0.4.1 (2010-10-13)\n------------------\n\n- fixed bug in comparison between\
        \ timedelta and Duration.\n- fixed precision problem with microseconds (reported\
        \ by Tommi Virtanen)\n\n0.4.0 (2009-02-09)\n------------------\n\n- added\
        \ method to parse ISO 8601 time zone strings\n- added methods to create ISO\
        \ 8601 conforming strings\n\n0.3.0 (2009-1-05)\n------------------\n\n- Initial\
        \ release\n\nTODOs\n=====\n\nThis to do list contains some thoughts and ideas\
        \ about missing features, and\nparts to think about, whether to implement\
        \ them or not. This list is probably\nnot complete.\n\nMissing features:\n\
        -----------------\n\n    * time formating does not allow to create fractional\
        \ representations.\n    * parser for ISO intervals.\n    * currently microseconds\
        \ are always padded to a length of 6 characters.\n      trailing 0s should\
        \ be optional\n\nDocumentation:\n--------------\n\n    * parse_datetime:\n\
        \       - complete documentation to show what this function allows, but ISO\
        \ forbids.\n         and vice verse.\n       - support other separators between\
        \ date and time than 'T'\n\n    * parse_date:\n       - yeardigits should\
        \ be always greater than 4\n       - dates before 0001-01-01 are not supported\n\
        \n    * parse_duration:\n       - alternative formats are not fully supported\
        \ due to parse_date restrictions\n       - standard duration format is fully\
        \ supported but not very restrictive.\n\n    * Duration:\n       - support\
        \ fractional years and month in calculations\n       - implement w3c order\
        \ relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n    \
        \   - refactor to have duration mathematics only at one place.\n       - localize\
        \ __str__ method (does timedelta do this?)\n       - when is a Duration negative?\n\
        \       - normalize Durations. months [00-12] and years ]-inf,+inf["
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: BSD License", "Operating System :: OS Independent",
        "Programming Language :: Python", "Programming Language :: Python :: 2.6",
        "Programming Language :: Python :: 2.7", "Programming Language :: Python ::
        3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python
        :: 3.4", "Programming Language :: Python :: Implementation :: PyPy", "Topic
        :: Internet", "Topic :: Software Development :: Libraries :: Python Modules"]'
  - file: isodate/isodate-0.4.1.tar.gz
    attributes:
      metadata_version: '1.0'
      name: isodate
      version: 0.4.1
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: 'ISO 8601 date/time parser

        =========================


        This module implements ISO 8601 date, time and duration parsing.

        The implementation follows ISO8601:2004 standard, and implements only

        date/time representations mentioned in the standard. If something is not

        mentioned there, then it is treated as non existent, and not as an allowed

        option.


        For instance, ISO8601:2004 never mentions 2 digit years. So, it is not

        intended by this module to support 2 digit years. (while it may still

        be valid as ISO date, because it is not explicitly forbidden.)

        Another example is, when no time zone information is given for a time,

        then it should be interpreted as local time, and not UTC.


        As this module maps ISO 8601 dates/times to standard Python data types, like

        *date*, *time*, *datetime* and *timedelta*, it is not possible to convert

        all possible ISO 8601 dates/times. For instance, dates before 0001-01-01 are

        not allowed by the Python *date* and *datetime* classes. Additionally

        fractional seconds are limited to microseconds. That means if the parser finds

        for instance nanoseconds it will round it to microseconds.


        Documentation

        -------------


        Currently there are four parsing methods available.

        * parse_time:

        parses an ISO 8601 time string into a *time* object

        * parse_date:

        parses an ISO 8601 date string into a *date* object

        * parse_datetime:

        parses an ISO 8601 date-time string into a *datetime* object

        * parse_duration:

        parses an ISO 8601 duration string into a *timedelta* or *Duration*

        object.

        * parse_tzinfo:

        parses the time zone info part of an ISO 8601 string into a

        *tzinfo* object.


        As ISO 8601 allows to define durations in years and months, and *timedelta*

        does not handle years and months, this module provides a *Duration* class,

        which can be used almost like a *timedelta* object (with some limitations).

        However, a *Duration* object can be converted into a *timedelta* object.


        There are also ISO formating methods for all supported data types. Each

        *xxx_isoformat* method accepts a format parameter. The default format is

        always the ISO 8601 expanded format. This is the same format used by

        *datetime.isoformat*:


        * time_isoformat:

        Intended to create ISO time strings with default format

        *hh:mm:ssZ*.

        * date_isoformat:

        Intended to create ISO date strings with default format

        *yyyy-mm-dd*.

        * datetime_isoformat:

        Intended to create ISO date-time strings with default format

        *yyyy-mm-ddThh:mm:ssZ*.

        * duration_isoformat:

        Intended to create ISO duration strings with default format

        *PnnYnnMnnDTnnHnnMnnS*.

        * tz_isoformat:

        Intended to create ISO time zone strings with default format

        *hh:mm*.

        * strftime:

        A re-implementation mostly compatible with Python''s *strftime*, but

        supports only those format strings, which can also be used for dates

        prior 1900. This method also understands how to format *datetime* and

        *Duration* instances.


        Installation:

        -------------


        This module can easily be installed with Python standard installation methods.

        Just use *setuptools* or *easy_install* as usual.


        Limitations:

        ------------


        * The parser accepts several date/time representation which should be invalid

        according to ISO 8601 standard.


        1. for date and time together, this parser accepts a mixture of basic and
        extended format.

        e.g. the date could be in basic format, while the time is accepted in extended
        format.

        It also allows short dates and times in date-time strings.

        2. For incomplete dates, the first day is chosen. e.g. 19th century results
        in a date of

        1901-01-01.

        3. negative *Duration* and *timedelta* value are not fully supported yet.


        Further information:

        --------------------


        The doc strings and unit tests should provide rather detailed information
        about

        the methods and their limitations.


        The source release provides a *setup.py* script and a *buildout.cfg*. Both
        can

        be used to run the unit tests included.


        Source code is available at `<http://hg.proclos.com/isodate>`_.



        CHANGES

        =======


        0.4.1 (2010-10-13)

        ------------------


        - fixed bug in comparison between timedelta and Duration.

        - fixed precision problem with microseconds (reported by Tommi Virtanen)


        0.4.0 (2009-02-09)

        ------------------


        - added method to parse ISO 8601 time zone strings

        - added methods to create ISO 8601 conforming strings


        0.3.0 (2009-1-05)

        ------------------


        - Initial release



        TODOs

        =====


        This to do list contains some thoughts and ideas about missing features, and

        parts to think about, whether to implement them or not. This list is probably

        not complete.


        Missing features:

        -----------------


        * time formating does not allow to create fractional representations.

        * parser for ISO intervals.


        Documentation:

        --------------


        * parse_datetime:

        - complete documentation to show what this function allows, but ISO forbids.

        and vice verse.

        - support other separators between date and time than ''T''


        * parse_date:

        - yeardigits should be always greater than 4

        - dates before 0001-01-01 are not supported


        * parse_duration:

        - alternative formats are not fully supported due to parse_date restrictions

        - standard duration format is fully supported but not very restrictive.


        * Duration:

        - support fractional years and month in calculations

        - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)

        - refactor to have duration mathematics only at one place.

        - localize __str__ method (does timedelta do this?)

        - when is a Duration negative?

        - normalize Durations. months [00-12] and years ]-inf,+inf['
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
  - file: isodate/isodate-0.4.7.tar.gz
    attributes:
      metadata_version: '1.0'
      name: isodate
      version: 0.4.7
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: "ISO 8601 date/time parser\n=========================\n\nThis module\
        \ implements ISO 8601 date, time and duration parsing.\nThe implementation\
        \ follows ISO8601:2004 standard, and implements only\ndate/time representations\
        \ mentioned in the standard. If something is not\nmentioned there, then it\
        \ is treated as non existent, and not as an allowed\noption.\n\nFor instance,\
        \ ISO8601:2004 never mentions 2 digit years. So, it is not\nintended by this\
        \ module to support 2 digit years. (while it may still\nbe valid as ISO date,\
        \ because it is not explicitly forbidden.)\nAnother example is, when no time\
        \ zone information is given for a time,\nthen it should be interpreted as\
        \ local time, and not UTC.\n\nAs this module maps ISO 8601 dates/times to\
        \ standard Python data types, like\n*date*, *time*, *datetime* and *timedelta*,\
        \ it is not possible to convert\nall possible ISO 8601 dates/times. For instance,\
        \ dates before 0001-01-01 are\nnot allowed by the Python *date* and *datetime*\
        \ classes. Additionally\nfractional seconds are limited to microseconds. That\
        \ means if the parser finds\nfor instance nanoseconds it will round it to\
        \ microseconds.\n\nDocumentation\n-------------\n\nCurrently there are four\
        \ parsing methods available.\n   * parse_time:\n        parses an ISO 8601\
        \ time string into a *time* object\n   * parse_date:\n        parses an ISO\
        \ 8601 date string into a *date* object\n   * parse_datetime:\n        parses\
        \ an ISO 8601 date-time string into a *datetime* object\n   * parse_duration:\n\
        \        parses an ISO 8601 duration string into a *timedelta* or *Duration*\n\
        \        object.\n   * parse_tzinfo:\n        parses the time zone info part\
        \ of an ISO 8601 string into a\n        *tzinfo* object.\n\nAs ISO 8601 allows\
        \ to define durations in years and months, and *timedelta*\ndoes not handle\
        \ years and months, this module provides a *Duration* class,\nwhich can be\
        \ used almost like a *timedelta* object (with some limitations).\nHowever,\
        \ a *Duration* object can be converted into a *timedelta* object.\n\nThere\
        \ are also ISO formating methods for all supported data types. Each\n*xxx_isoformat*\
        \ method accepts a format parameter. The default format is\nalways the ISO\
        \ 8601 expanded format. This is the same format used by\n*datetime.isoformat*:\n\
        \n    * time_isoformat:\n        Intended to create ISO time strings with\
        \ default format\n        *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended\
        \ to create ISO date strings with default format\n        *yyyy-mm-dd*.\n\
        \    * datetime_isoformat:\n        Intended to create ISO date-time strings\
        \ with default format\n        *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n\
        \        Intended to create ISO duration strings with default format\n   \
        \     *PnnYnnMnnDTnnHnnMnnS*.\n    * tz_isoformat:\n        Intended to create\
        \ ISO time zone strings with default format\n        *hh:mm*.\n    * strftime:\n\
        \        A re-implementation mostly compatible with Python's *strftime*, but\n\
        \        supports only those format strings, which can also be used for dates\n\
        \        prior 1900. This method also understands how to format *datetime*\
        \ and\n        *Duration* instances.\n\nInstallation:\n-------------\n\nThis\
        \ module can easily be installed with Python standard installation methods.\n\
        \nEither use *python setup.py install* or in case you have *setuptools* or\n\
        *distribute* available, you can also use *easy_install*.\n\nLimitations:\n\
        ------------\n\n   * The parser accepts several date/time representation which\
        \ should be invalid\n     according to ISO 8601 standard.\n\n     1. for date\
        \ and time together, this parser accepts a mixture of basic and extended format.\n\
        \        e.g. the date could be in basic format, while the time is accepted\
        \ in extended format.\n        It also allows short dates and times in date-time\
        \ strings.\n     2. For incomplete dates, the first day is chosen. e.g. 19th\
        \ century results in a date of\n        1901-01-01.\n     3. negative *Duration*\
        \ and *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script and a *buildout.cfg*. Both can\nbe\
        \ used to run the unit tests included.\n\nSource code is available at `<http://hg.proclos.com/isodate>`_.\n\
        \n\nCHANGES\n=======\n\n0.4.7 (2012-01-26)\n------------------\n\n- fixed\
        \ tzinfo formatting (never pass None into tzinfo.utcoffset())\n\n\n0.4.6 (2012-01-06)\n\
        ------------------\n\n- added Python 3 compatibility via 2to3\n\n0.4.5 (2012-01-06)\n\
        ------------------\n\n- made setuptools dependency optional\n\n0.4.4 (2011-04-16)\n\
        ------------------\n\n- Fixed formatting of microseconds for datetime objects\n\
        \n0.4.3 (2010-10-29)\n------------------\n\n- Fixed problem with %P formating\
        \ and fractions (supplied by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\
        \n- Implemented unary - for Duration (supplied by David Brooks)\n- Output\
        \ fractional seconds with '%P' format. (partly supplied by David Brooks)\n\
        \n0.4.1 (2010-10-13)\n------------------\n\n- fixed bug in comparison between\
        \ timedelta and Duration.\n- fixed precision problem with microseconds (reported\
        \ by Tommi Virtanen)\n\n0.4.0 (2009-02-09)\n------------------\n\n- added\
        \ method to parse ISO 8601 time zone strings\n- added methods to create ISO\
        \ 8601 conforming strings\n\n0.3.0 (2009-1-05)\n------------------\n\n- Initial\
        \ release\n\nTODOs\n=====\n\nThis to do list contains some thoughts and ideas\
        \ about missing features, and\nparts to think about, whether to implement\
        \ them or not. This list is probably\nnot complete.\n\nMissing features:\n\
        -----------------\n\n    * time formating does not allow to create fractional\
        \ representations.\n    * parser for ISO intervals.\n    * currently microseconds\
        \ are always padded to a length of 6 characters.\n      trailing 0s should\
        \ be optional\n\nDocumentation:\n--------------\n\n    * parse_datetime:\n\
        \       - complete documentation to show what this function allows, but ISO\
        \ forbids.\n         and vice verse.\n       - support other separators between\
        \ date and time than 'T'\n\n    * parse_date:\n       - yeardigits should\
        \ be always greater than 4\n       - dates before 0001-01-01 are not supported\n\
        \n    * parse_duration:\n       - alternative formats are not fully supported\
        \ due to parse_date restrictions\n       - standard duration format is fully\
        \ supported but not very restrictive.\n\n    * Duration:\n       - support\
        \ fractional years and month in calculations\n       - implement w3c order\
        \ relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n    \
        \   - refactor to have duration mathematics only at one place.\n       - localize\
        \ __str__ method (does timedelta do this?)\n       - when is a Duration negative?\n\
        \       - normalize Durations. months [00-12] and years ]-inf,+inf["
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
  - file: isodate/isodate-0.5.0.tar.gz
    attributes:
      metadata_version: '1.1'
      name: isodate
      version: 0.5.0
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: "ISO 8601 date/time parser\n=========================\n\n.. image::\
        \ https://travis-ci.org/gweis/isodate.png?branch=master   :target: https://travis-ci.org/gweis/isodate\n\
        \nThis module implements ISO 8601 date, time and duration parsing.\nThe implementation\
        \ follows ISO8601:2004 standard, and implements only\ndate/time representations\
        \ mentioned in the standard. If something is not\nmentioned there, then it\
        \ is treated as non existent, and not as an allowed\noption.\n\nFor instance,\
        \ ISO8601:2004 never mentions 2 digit years. So, it is not\nintended by this\
        \ module to support 2 digit years. (while it may still\nbe valid as ISO date,\
        \ because it is not explicitly forbidden.)\nAnother example is, when no time\
        \ zone information is given for a time,\nthen it should be interpreted as\
        \ local time, and not UTC.\n\nAs this module maps ISO 8601 dates/times to\
        \ standard Python data types, like\n*date*, *time*, *datetime* and *timedelta*,\
        \ it is not possible to convert\nall possible ISO 8601 dates/times. For instance,\
        \ dates before 0001-01-01 are\nnot allowed by the Python *date* and *datetime*\
        \ classes. Additionally\nfractional seconds are limited to microseconds. That\
        \ means if the parser finds\nfor instance nanoseconds it will round it to\
        \ microseconds.\n\nDocumentation\n-------------\n\nCurrently there are four\
        \ parsing methods available.\n   * parse_time:\n        parses an ISO 8601\
        \ time string into a *time* object\n   * parse_date:\n        parses an ISO\
        \ 8601 date string into a *date* object\n   * parse_datetime:\n        parses\
        \ an ISO 8601 date-time string into a *datetime* object\n   * parse_duration:\n\
        \        parses an ISO 8601 duration string into a *timedelta* or *Duration*\n\
        \        object.\n   * parse_tzinfo:\n        parses the time zone info part\
        \ of an ISO 8601 string into a\n        *tzinfo* object.\n\nAs ISO 8601 allows\
        \ to define durations in years and months, and *timedelta*\ndoes not handle\
        \ years and months, this module provides a *Duration* class,\nwhich can be\
        \ used almost like a *timedelta* object (with some limitations).\nHowever,\
        \ a *Duration* object can be converted into a *timedelta* object.\n\nThere\
        \ are also ISO formating methods for all supported data types. Each\n*xxx_isoformat*\
        \ method accepts a format parameter. The default format is\nalways the ISO\
        \ 8601 expanded format. This is the same format used by\n*datetime.isoformat*:\n\
        \n    * time_isoformat:\n        Intended to create ISO time strings with\
        \ default format\n        *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended\
        \ to create ISO date strings with default format\n        *yyyy-mm-dd*.\n\
        \    * datetime_isoformat:\n        Intended to create ISO date-time strings\
        \ with default format\n        *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n\
        \        Intended to create ISO duration strings with default format\n   \
        \     *PnnYnnMnnDTnnHnnMnnS*.\n    * tz_isoformat:\n        Intended to create\
        \ ISO time zone strings with default format\n        *hh:mm*.\n    * strftime:\n\
        \        A re-implementation mostly compatible with Python's *strftime*, but\n\
        \        supports only those format strings, which can also be used for dates\n\
        \        prior 1900. This method also understands how to format *datetime*\
        \ and\n        *Duration* instances.\n\nInstallation:\n-------------\n\nThis\
        \ module can easily be installed with Python standard installation methods.\n\
        \nEither use *python setup.py install* or in case you have *setuptools* or\n\
        *distribute* available, you can also use *easy_install*.\n\nLimitations:\n\
        ------------\n\n   * The parser accepts several date/time representation which\
        \ should be invalid\n     according to ISO 8601 standard.\n\n     1. for date\
        \ and time together, this parser accepts a mixture of basic and extended format.\n\
        \        e.g. the date could be in basic format, while the time is accepted\
        \ in extended format.\n        It also allows short dates and times in date-time\
        \ strings.\n     2. For incomplete dates, the first day is chosen. e.g. 19th\
        \ century results in a date of\n        1901-01-01.\n     3. negative *Duration*\
        \ and *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script and a *buildout.cfg*. Both can\nbe\
        \ used to run the unit tests included.\n\nSource code is available at `<http://github.com/gweis/isodate>`_.\n\
        \nCHANGES\n=======\n\n0.5.0 (2014-02-23)\n------------------\n\n- ISO8601Error\
        \ are subclasses of ValueError now\n- improve compatibility across various\
        \ python variants and versions\n- raise exceptions when using fractional years\
        \ and months in date\n  maths with durations\n- renamed method todatetime\
        \ on Duraction objects to totimedelta\n\n\n0.4.9 (2012-10-30)\n------------------\n\
        \n- support pickling FixedOffset instances\n- make sure parsed fractional\
        \ seconds are in microseconds\n- add leading zeros when formattig microseconds\
        \ (Jarom Loveridge)\n\n\n0.4.8 (2012-05-04)\n------------------\n\n- fixed\
        \ incompatibility of unittests with python 2.5 and 2.6 (runs fine on 2.7\n\
        \  and 3.2)\n\n\n0.4.7 (2012-01-26)\n------------------\n\n- fixed tzinfo\
        \ formatting (never pass None into tzinfo.utcoffset())\n\n\n0.4.6 (2012-01-06)\n\
        ------------------\n\n- added Python 3 compatibility via 2to3\n\n0.4.5 (2012-01-06)\n\
        ------------------\n\n- made setuptools dependency optional\n\n0.4.4 (2011-04-16)\n\
        ------------------\n\n- Fixed formatting of microseconds for datetime objects\n\
        \n0.4.3 (2010-10-29)\n------------------\n\n- Fixed problem with %P formating\
        \ and fractions (supplied by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\
        \n- Implemented unary - for Duration (supplied by David Brooks)\n- Output\
        \ fractional seconds with '%P' format. (partly supplied by David Brooks)\n\
        \n0.4.1 (2010-10-13)\n------------------\n\n- fixed bug in comparison between\
        \ timedelta and Duration.\n- fixed precision problem with microseconds (reported\
        \ by Tommi Virtanen)\n\n0.4.0 (2009-02-09)\n------------------\n\n- added\
        \ method to parse ISO 8601 time zone strings\n- added methods to create ISO\
        \ 8601 conforming strings\n\n0.3.0 (2009-1-05)\n------------------\n\n- Initial\
        \ release\n\nTODOs\n=====\n\nThis to do list contains some thoughts and ideas\
        \ about missing features, and\nparts to think about, whether to implement\
        \ them or not. This list is probably\nnot complete.\n\nMissing features:\n\
        -----------------\n\n    * time formating does not allow to create fractional\
        \ representations.\n    * parser for ISO intervals.\n    * currently microseconds\
        \ are always padded to a length of 6 characters.\n      trailing 0s should\
        \ be optional\n\nDocumentation:\n--------------\n\n    * parse_datetime:\n\
        \       - complete documentation to show what this function allows, but ISO\
        \ forbids.\n         and vice verse.\n       - support other separators between\
        \ date and time than 'T'\n\n    * parse_date:\n       - yeardigits should\
        \ be always greater than 4\n       - dates before 0001-01-01 are not supported\n\
        \n    * parse_duration:\n       - alternative formats are not fully supported\
        \ due to parse_date restrictions\n       - standard duration format is fully\
        \ supported but not very restrictive.\n\n    * Duration:\n       - support\
        \ fractional years and month in calculations\n       - implement w3c order\
        \ relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n    \
        \   - refactor to have duration mathematics only at one place.\n       - localize\
        \ __str__ method (does timedelta do this?)\n       - when is a Duration negative?\n\
        \       - normalize Durations. months [00-12] and years ]-inf,+inf["
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: BSD License", "Operating System :: OS Independent",
        "Programming Language :: Python", "Programming Language :: Python :: 2.6",
        "Programming Language :: Python :: 2.7", "Programming Language :: Python ::
        3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python
        :: Implementation :: PyPy", "Topic :: Internet", "Topic :: Software Development
        :: Libraries :: Python Modules"]'
  - file: isodate/isodate-0.4.4.tar.gz
    attributes:
      metadata_version: '1.0'
      name: isodate
      version: 0.4.4
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: "ISO 8601 date/time parser\n=========================\n\nThis module\
        \ implements ISO 8601 date, time and duration parsing.\nThe implementation\
        \ follows ISO8601:2004 standard, and implements only\ndate/time representations\
        \ mentioned in the standard. If something is not\nmentioned there, then it\
        \ is treated as non existent, and not as an allowed\noption.\n\nFor instance,\
        \ ISO8601:2004 never mentions 2 digit years. So, it is not\nintended by this\
        \ module to support 2 digit years. (while it may still\nbe valid as ISO date,\
        \ because it is not explicitly forbidden.)\nAnother example is, when no time\
        \ zone information is given for a time,\nthen it should be interpreted as\
        \ local time, and not UTC.\n\nAs this module maps ISO 8601 dates/times to\
        \ standard Python data types, like\n*date*, *time*, *datetime* and *timedelta*,\
        \ it is not possible to convert\nall possible ISO 8601 dates/times. For instance,\
        \ dates before 0001-01-01 are\nnot allowed by the Python *date* and *datetime*\
        \ classes. Additionally\nfractional seconds are limited to microseconds. That\
        \ means if the parser finds\nfor instance nanoseconds it will round it to\
        \ microseconds.\n\nDocumentation\n-------------\n\nCurrently there are four\
        \ parsing methods available.\n   * parse_time:\n        parses an ISO 8601\
        \ time string into a *time* object\n   * parse_date:\n        parses an ISO\
        \ 8601 date string into a *date* object\n   * parse_datetime:\n        parses\
        \ an ISO 8601 date-time string into a *datetime* object\n   * parse_duration:\n\
        \        parses an ISO 8601 duration string into a *timedelta* or *Duration*\n\
        \        object.\n   * parse_tzinfo:\n        parses the time zone info part\
        \ of an ISO 8601 string into a\n        *tzinfo* object.\n\nAs ISO 8601 allows\
        \ to define durations in years and months, and *timedelta*\ndoes not handle\
        \ years and months, this module provides a *Duration* class,\nwhich can be\
        \ used almost like a *timedelta* object (with some limitations).\nHowever,\
        \ a *Duration* object can be converted into a *timedelta* object.\n\nThere\
        \ are also ISO formating methods for all supported data types. Each\n*xxx_isoformat*\
        \ method accepts a format parameter. The default format is\nalways the ISO\
        \ 8601 expanded format. This is the same format used by\n*datetime.isoformat*:\n\
        \n    * time_isoformat:\n        Intended to create ISO time strings with\
        \ default format\n        *hh:mm:ssZ*.\n    * date_isoformat:\n        Intended\
        \ to create ISO date strings with default format\n        *yyyy-mm-dd*.\n\
        \    * datetime_isoformat:\n        Intended to create ISO date-time strings\
        \ with default format\n        *yyyy-mm-ddThh:mm:ssZ*.\n    * duration_isoformat:\n\
        \        Intended to create ISO duration strings with default format\n   \
        \     *PnnYnnMnnDTnnHnnMnnS*.\n    * tz_isoformat:\n        Intended to create\
        \ ISO time zone strings with default format\n        *hh:mm*.\n    * strftime:\n\
        \        A re-implementation mostly compatible with Python's *strftime*, but\n\
        \        supports only those format strings, which can also be used for dates\n\
        \        prior 1900. This method also understands how to format *datetime*\
        \ and\n        *Duration* instances.\n\nInstallation:\n-------------\n\nThis\
        \ module can easily be installed with Python standard installation methods.\n\
        Just use *setuptools* or *easy_install* as usual.\n\nLimitations:\n------------\n\
        \n   * The parser accepts several date/time representation which should be\
        \ invalid\n     according to ISO 8601 standard.\n\n     1. for date and time\
        \ together, this parser accepts a mixture of basic and extended format.\n\
        \        e.g. the date could be in basic format, while the time is accepted\
        \ in extended format.\n        It also allows short dates and times in date-time\
        \ strings.\n     2. For incomplete dates, the first day is chosen. e.g. 19th\
        \ century results in a date of\n        1901-01-01.\n     3. negative *Duration*\
        \ and *timedelta* value are not fully supported yet.\n\nFurther information:\n\
        --------------------\n\nThe doc strings and unit tests should provide rather\
        \ detailed information about\nthe methods and their limitations.\n\nThe source\
        \ release provides a *setup.py* script and a *buildout.cfg*. Both can\nbe\
        \ used to run the unit tests included.\n\nSource code is available at `<http://hg.proclos.com/isodate>`_.\n\
        \n\nCHANGES\n=======\n\n0.4.4 (2011-04-16)\n------------------\n\n- Fixed\
        \ formatting of microseconds for datetime objects\n\n0.4.3 (2010-10-29)\n\
        ------------------\n\n- Fixed problem with %P formating and fractions (supplied\
        \ by David Brooks)\n\n0.4.2 (2010-10-28)\n------------------\n\n- Implemented\
        \ unary - for Duration (supplied by David Brooks)\n- Output fractional seconds\
        \ with '%P' format. (partly supplied by David Brooks)\n\n0.4.1 (2010-10-13)\n\
        ------------------\n\n- fixed bug in comparison between timedelta and Duration.\n\
        - fixed precision problem with microseconds (reported by Tommi Virtanen)\n\
        \n0.4.0 (2009-02-09)\n------------------\n\n- added method to parse ISO 8601\
        \ time zone strings\n- added methods to create ISO 8601 conforming strings\n\
        \n0.3.0 (2009-1-05)\n------------------\n\n- Initial release\n\nTODOs\n=====\n\
        \nThis to do list contains some thoughts and ideas about missing features,\
        \ and\nparts to think about, whether to implement them or not. This list is\
        \ probably\nnot complete.\n\nMissing features:\n-----------------\n\n    *\
        \ time formating does not allow to create fractional representations.\n  \
        \  * parser for ISO intervals.\n    * currently microseconds are always padded\
        \ to a length of 6 characters.\n      trailing 0s should be optional\n\nDocumentation:\n\
        --------------\n\n    * parse_datetime:\n       - complete documentation to\
        \ show what this function allows, but ISO forbids.\n         and vice verse.\n\
        \       - support other separators between date and time than 'T'\n\n    *\
        \ parse_date:\n       - yeardigits should be always greater than 4\n     \
        \  - dates before 0001-01-01 are not supported\n\n    * parse_duration:\n\
        \       - alternative formats are not fully supported due to parse_date restrictions\n\
        \       - standard duration format is fully supported but not very restrictive.\n\
        \n    * Duration:\n       - support fractional years and month in calculations\n\
        \       - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)\n\
        \       - refactor to have duration mathematics only at one place.\n     \
        \  - localize __str__ method (does timedelta do this?)\n       - when is a\
        \ Duration negative?\n       - normalize Durations. months [00-12] and years\
        \ ]-inf,+inf["
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
  - file: isodate/isodate-0.4.0.tar.gz
    attributes:
      metadata_version: '1.0'
      name: isodate
      version: 0.4.0
      platforms: '["UNKNOWN"]'
      summary: An ISO 8601 date/time/duration parser and formater
      description: 'ISO 8601 date/time parser

        =========================


        This module implements ISO 8601 date, time and duration parsing.

        The implementation follows ISO8601:2004 standard, and implements only

        date/time representations mentioned in the standard. If something is not

        mentioned there, then it is treated as non existent, and not as an allowed

        option.


        For instance, ISO8601:2004 never mentions 2 digit years. So, it is not

        intended by this module to support 2 digit years. (while it may still

        be valid as ISO date, because it is not explicitly forbidden.)

        Another example is, when no time zone information is given for a time,

        then it should be interpreted as local time, and not UTC.


        As this module maps ISO 8601 dates/times to standard Python data types, like

        *date*, *time*, *datetime* and *timedelta*, it is not possible to convert

        all possible ISO 8601 dates/times. For instance, dates before 0001-01-01 are

        not allowed by the Python *date* and *datetime* classes.


        Documentation

        -------------


        Currently there are four parsing methods available.

        * parse_time:

        parses an ISO 8601 time string into a *time* object

        * parse_date:

        parses an ISO 8601 date string into a *date* object

        * parse_datetime:

        parses an ISO 8601 date-time string into a *datetime* object

        * parse_duration:

        parses an ISO 8601 duration string into a *timedelta* or *Duration*

        object.

        * parse_tzinfo:

        parses the time zone info part of an ISO 8601 string into a

        *tzinfo* object.


        As ISO 8601 allows to define durations in years and months, and *timedelta*

        does not handle years and months, this module provides a *Duration* class,

        which can be used almost like a *timedelta* object (with some limitations).

        However, a *Duration* object can be converted into a *timedelta* object.


        There are also ISO formating methods for all supported data types. Each

        *xxx_isoformat* method accepts a format parameter. The default format is

        always the ISO 8601 expanded format. This is the same format used by

        *datetime.isoformat*:


        * time_isoformat:

        Intended to create ISO time strings with default format

        *hh:mm:ssZ*.

        * date_isoformat:

        Intended to create ISO date strings with default format

        *yyyy-mm-dd*.

        * datetime_isoformat:

        Intended to create ISO date-time strings with default format

        *yyyy-mm-ddThh:mm:ssZ*.

        * duration_isoformat:

        Intended to create ISO duration strings with default format

        *PnnYnnMnnDTnnHnnMnnS*.

        * tz_isoformat:

        Intended to create ISO time zone strings with default format

        *hh:mm*.

        * strftime:

        A re-implementation mostly compatible with Python''s *strftime*, but

        supports only those format strings, which can also be used for dates

        prior 1900. This method also understands how to format *datetime* and

        *Duration* instances.


        Installation:

        -------------


        This module can easily be installed with Python standard installation methods.

        Just use *setuptools* or *easy_install* as usual.


        Limitations:

        ------------


        * The parser accepts several date/time representation which should be invalid

        according to ISO 8601 standard.


        1. for date and time together, this parser accepts a mixture of basic and
        extended format.

        e.g. the date could be in basic format, while the time is accepted in extended
        format.

        It also allows short dates and times in date-time strings.

        2. For incomplete dates, the first day is chosen. e.g. 19th century results
        in a date of

        1901-01-01.

        3. negative *Duration* and *timedelta* value are not fully supported yet.


        Further information:

        --------------------


        The doc strings and unit tests should provide rather detailed information
        about

        the methods and their limitations.


        The source release provides a *setup.py* script and a *buildout.cfg*. Both
        can

        be used to run the unit tests included.


        Source code is available at `<http://hg.proclos.com/isodate>`_.



        CHANGES

        =======


        0.4.0 (unreleased)

        ------------------


        - added method to parse ISO 8601 time zone strings

        - added methods to create ISO 8601 conforming strings


        0.3.0 (2009-1-05)

        ------------------


        - Initial release



        TODOs

        =====


        This to do list contains some thoughts and ideas about missing features, and

        parts to think about, whether to implement them or not. This list is probably

        not complete.


        Missing features:

        -----------------


        * time formating does not allow to create fractional representations.

        * parser for ISO intervals.


        Documentation:

        --------------


        * parse_datetime:

        - complete documentation to show what this function allows, but ISO forbids.

        and vice verse.

        - support other separators between date and time than ''T''


        * parse_date:

        - yeardigits should be always greater than 4

        - dates before 0001-01-01 are not supported


        * parse_duration:

        - alternative formats are not fully supported due to parse_date restrictions

        - standard duration format is fully supported but not very restrictive.


        * Duration:

        - support fractional years and month in calculations

        - implement w3c order relation? (`<http://www.w3.org/TR/xmlschema-2/#duration-order>`_)

        - refactor to have duration mathematics only at one place.

        - localize __str__ method (does timedelta do this?)

        - when is a Duration negative?

        - normalize Durations. months [00-12] and years ]-inf,+inf['
      home_page: http://cheeseshop.python.org/pypi/isodate
      author: Gerhard Weis
      author_email: gerhard.weis@proclos.com
      license: BSD
  - file: iniconfig/iniconfig-1.1.0.tar.gz
    attributes:
      metadata_version: '1.1'
      name: iniconfig
      version: 1.1.0
      platforms: '["unix", "linux", "osx", "cygwin", "win32"]'
      summary: 'iniconfig: brain-dead simple config-ini parsing'
      description: "iniconfig: brain-dead simple parsing of ini files\n=======================================================\n\
        \niniconfig is a small and simple INI-file parser module\nhaving a unique\
        \ set of features:\n\n* tested against Python2.4 across to Python3.2, Jython,\
        \ PyPy\n* maintains order of sections and entries\n* supports multi-line values\
        \ with or without line-continuations\n* supports \"#\" comments everywhere\n\
        * raises errors with proper line-numbers\n* no bells and whistles like automatic\
        \ substitutions\n* iniconfig raises an Error if two sections have the same\
        \ name.\n\nIf you encounter issues or have feature wishes please report them\
        \ to:\n\n    http://github.com/RonnyPfannschmidt/iniconfig/issues\n\nBasic\
        \ Example\n===================================\n\nIf you have an ini file\
        \ like this::\n\n    # content of example.ini\n    [section1] # comment\n\
        \    name1=value1  # comment\n    name1b=value1,value2  # comment\n\n    [section2]\n\
        \    name2=\n        line1\n        line2\n\nthen you can do::\n\n    >>>\
        \ import iniconfig\n    >>> ini = iniconfig.IniConfig(\"example.ini\")\n \
        \   >>> ini['section1']['name1'] # raises KeyError if not exists\n    'value1'\n\
        \    >>> ini.get('section1', 'name1b', [], lambda x: x.split(\",\"))\n   \
        \ ['value1', 'value2']\n    >>> ini.get('section1', 'notexist', [], lambda\
        \ x: x.split(\",\"))\n    []\n    >>> [x.name for x in list(ini)]\n    ['section1',\
        \ 'section2']\n    >>> list(list(ini)[0].items())\n    [('name1', 'value1'),\
        \ ('name1b', 'value1,value2')]\n    >>> 'section1' in ini\n    True\n    >>>\
        \ 'inexistendsection' in ini\n    False"
      home_page: http://github.com/RonnyPfannschmidt/iniconfig
      author: Ronny Pfannschmidt, Holger Krekel
      author_email: opensource@ronnypfannschmidt.de, holger.krekel@gmail.com
      license: MIT License
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Operating
        System :: Microsoft :: Windows", "Operating System :: MacOS :: MacOS X", "Topic
        :: Software Development :: Libraries", "Topic :: Utilities", "Programming
        Language :: Python", "Programming Language :: Python :: 2", "Programming Language
        :: Python :: 3"]'
  - file: iniconfig/iniconfig-1.1.1.tar.gz
    attributes:
      metadata_version: '1.1'
      name: iniconfig
      version: 1.1.1
      platforms: '["unix", "linux", "osx", "cygwin", "win32"]'
      summary: 'iniconfig: brain-dead simple config-ini parsing'
      description: "iniconfig: brain-dead simple parsing of ini files\n=======================================================\n\
        \niniconfig is a small and simple INI-file parser module\nhaving a unique\
        \ set of features:\n\n* tested against Python2.4 across to Python3.2, Jython,\
        \ PyPy\n* maintains order of sections and entries\n* supports multi-line values\
        \ with or without line-continuations\n* supports \"#\" comments everywhere\n\
        * raises errors with proper line-numbers\n* no bells and whistles like automatic\
        \ substitutions\n* iniconfig raises an Error if two sections have the same\
        \ name.\n\nIf you encounter issues or have feature wishes please report them\
        \ to:\n\n    http://github.com/RonnyPfannschmidt/iniconfig/issues\n\nBasic\
        \ Example\n===================================\n\nIf you have an ini file\
        \ like this::\n\n    # content of example.ini\n    [section1] # comment\n\
        \    name1=value1  # comment\n    name1b=value1,value2  # comment\n\n    [section2]\n\
        \    name2=\n        line1\n        line2\n\nthen you can do::\n\n    >>>\
        \ import iniconfig\n    >>> ini = iniconfig.IniConfig(\"example.ini\")\n \
        \   >>> ini['section1']['name1'] # raises KeyError if not exists\n    'value1'\n\
        \    >>> ini.get('section1', 'name1b', [], lambda x: x.split(\",\"))\n   \
        \ ['value1', 'value2']\n    >>> ini.get('section1', 'notexist', [], lambda\
        \ x: x.split(\",\"))\n    []\n    >>> [x.name for x in list(ini)]\n    ['section1',\
        \ 'section2']\n    >>> list(list(ini)[0].items())\n    [('name1', 'value1'),\
        \ ('name1b', 'value1,value2')]\n    >>> 'section1' in ini\n    True\n    >>>\
        \ 'inexistendsection' in ini\n    False"
      home_page: http://github.com/RonnyPfannschmidt/iniconfig
      author: Ronny Pfannschmidt, Holger Krekel
      author_email: opensource@ronnypfannschmidt.de, holger.krekel@gmail.com
      license: MIT License
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Operating
        System :: Microsoft :: Windows", "Operating System :: MacOS :: MacOS X", "Topic
        :: Software Development :: Libraries", "Topic :: Utilities", "Programming
        Language :: Python", "Programming Language :: Python :: 2", "Programming Language
        :: Python :: 3"]'
  - file: iniconfig/iniconfig-0.1.tar.gz
    attributes:
      metadata_version: '1.0'
      name: iniconfig
      version: '0.1'
      platforms: '["unix", "linux", "osx", "cygwin", "win32"]'
      summary: 'iniconfig: brain-dead simple config-ini parsing'
      description: "iniconfig: brain-dead simple parsing of ini files\n=======================================================\n\
        \niniconfig is a small and simple INI-file parser module\nhaving a unique\
        \ set of features:\n\n* tested against Python2.4 across to Python3.2, Jython,\
        \ PyPy\n* maintains order of sections and entries\n* supports multi-line values\
        \ with or without line-continuations\n* supports \"#\" comments everywhere\n\
        * raises errors with proper line-numbers\n* no bells and whistles like automatic\
        \ substitutions\n* iniconfig raises an Error if two sections have the same\
        \ name.\n\nIf you encounter issues or have feature wishes please report them\
        \ to:\n\n    http://bitbucket.org/RonnyPfannschmidt/iniconfig/issues\n\nBasic\
        \ Example\n===================================\n\nIf you have an ini file\
        \ like this::\n\n    # content of example.ini\n    [section1] # comment\n\
        \    name1=value1  # comment\n    name1b=value1,value2  # comment\n\n    [section2]\n\
        \    name2=\n        line1\n        line2\n\nthen you can do::\n \n    >>>\
        \ import iniconfig\n    >>> ini = iniconfig.IniConfig(\"example.ini\")\n \
        \   >>> ini['section1']['name1'] # raises KeyError if not exists\n    'value1'\n\
        \    >>> ini.get('section1', 'name1b', [], lambda x: x.split(\",\"))\n   \
        \ ['value1', 'value2']\n    >>> ini.get('section1', 'notexist', [], lambda\
        \ x: x.split(\",\"))\n    []\n    >>> [x.name for x in list(ini)]\n    ['section1',\
        \ 'section2']\n    >>> list(list(ini)[0].items())\n    [('name1', 'value1'),\
        \ ('name1b', 'value1,value2')]"
      home_page: http://bitbucket.org/RonnyPfannschmidt/inipkg
      author: Ronny Pfannschmidt
      author_email: Ronny.Pfannschmidt@gmx.de
      license: MIT License
  - file: iniconfig/iniconfig-1.0.0.tar.gz
    attributes:
      metadata_version: '1.1'
      name: iniconfig
      version: 1.0.0
      platforms: '["unix", "linux", "osx", "cygwin", "win32"]'
      summary: 'iniconfig: brain-dead simple config-ini parsing'
      description: "iniconfig: brain-dead simple parsing of ini files\n=======================================================\n\
        \niniconfig is a small and simple INI-file parser module\nhaving a unique\
        \ set of features:\n\n* tested against Python2.4 across to Python3.2, Jython,\
        \ PyPy\n* maintains order of sections and entries\n* supports multi-line values\
        \ with or without line-continuations\n* supports \"#\" comments everywhere\n\
        * raises errors with proper line-numbers\n* no bells and whistles like automatic\
        \ substitutions\n* iniconfig raises an Error if two sections have the same\
        \ name.\n\nIf you encounter issues or have feature wishes please report them\
        \ to:\n\n    http://github.org/RonnyPfannschmidt/iniconfig/issues\n\nBasic\
        \ Example\n===================================\n\nIf you have an ini file\
        \ like this::\n\n    # content of example.ini\n    [section1] # comment\n\
        \    name1=value1  # comment\n    name1b=value1,value2  # comment\n\n    [section2]\n\
        \    name2=\n        line1\n        line2\n\nthen you can do::\n\n    >>>\
        \ import iniconfig\n    >>> ini = iniconfig.IniConfig(\"example.ini\")\n \
        \   >>> ini['section1']['name1'] # raises KeyError if not exists\n    'value1'\n\
        \    >>> ini.get('section1', 'name1b', [], lambda x: x.split(\",\"))\n   \
        \ ['value1', 'value2']\n    >>> ini.get('section1', 'notexist', [], lambda\
        \ x: x.split(\",\"))\n    []\n    >>> [x.name for x in list(ini)]\n    ['section1',\
        \ 'section2']\n    >>> list(list(ini)[0].items())\n    [('name1', 'value1'),\
        \ ('name1b', 'value1,value2')]\n    >>> 'section1' in ini\n    True\n    >>>\
        \ 'inexistendsection' in ini\n    False"
      home_page: http://github.com/RonnyPfannschmidt/iniconfig
      author: Ronny Pfannschmidt, Holger Krekel
      author_email: opensource@ronnypfannschmidt.de, holger.krekel@gmail.com
      license: MIT License
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Operating
        System :: Microsoft :: Windows", "Operating System :: MacOS :: MacOS X", "Topic
        :: Software Development :: Libraries", "Topic :: Utilities", "Programming
        Language :: Python", "Programming Language :: Python :: 2", "Programming Language
        :: Python :: 3"]'
  - file: iniconfig/iniconfig-1.0.1-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: iniconfig
      version: 1.0.1
      platforms: '["unix", "linux", "osx", "cygwin", "win32"]'
      summary: 'iniconfig: brain-dead simple config-ini parsing'
      home_page: http://github.com/RonnyPfannschmidt/iniconfig
      author: Ronny Pfannschmidt, Holger Krekel
      author_email: opensource@ronnypfannschmidt.de, holger.krekel@gmail.com
      license: MIT License
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Operating
        System :: Microsoft :: Windows", "Operating System :: MacOS :: MacOS X", "Topic
        :: Software Development :: Libraries", "Topic :: Utilities", "Programming
        Language :: Python", "Programming Language :: Python :: 2", "Programming Language
        :: Python :: 3"]'
      description: "iniconfig: brain-dead simple parsing of ini files\n=======================================================\n\
        \niniconfig is a small and simple INI-file parser module\nhaving a unique\
        \ set of features:\n\n* tested against Python2.4 across to Python3.2, Jython,\
        \ PyPy\n* maintains order of sections and entries\n* supports multi-line values\
        \ with or without line-continuations\n* supports \"#\" comments everywhere\n\
        * raises errors with proper line-numbers\n* no bells and whistles like automatic\
        \ substitutions\n* iniconfig raises an Error if two sections have the same\
        \ name.\n\nIf you encounter issues or have feature wishes please report them\
        \ to:\n\n    http://github.com/RonnyPfannschmidt/iniconfig/issues\n\nBasic\
        \ Example\n===================================\n\nIf you have an ini file\
        \ like this::\n\n    # content of example.ini\n    [section1] # comment\n\
        \    name1=value1  # comment\n    name1b=value1,value2  # comment\n\n    [section2]\n\
        \    name2=\n        line1\n        line2\n\nthen you can do::\n\n    >>>\
        \ import iniconfig\n    >>> ini = iniconfig.IniConfig(\"example.ini\")\n \
        \   >>> ini['section1']['name1'] # raises KeyError if not exists\n    'value1'\n\
        \    >>> ini.get('section1', 'name1b', [], lambda x: x.split(\",\"))\n   \
        \ ['value1', 'value2']\n    >>> ini.get('section1', 'notexist', [], lambda\
        \ x: x.split(\",\"))\n    []\n    >>> [x.name for x in list(ini)]\n    ['section1',\
        \ 'section2']\n    >>> list(list(ini)[0].items())\n    [('name1', 'value1'),\
        \ ('name1b', 'value1,value2')]\n    >>> 'section1' in ini\n    True\n    >>>\
        \ 'inexistendsection' in ini\n    False\n\n\n"
  - file: iniconfig/iniconfig-0.2.dev0.tar.gz
    attributes:
      metadata_version: '1.0'
      name: iniconfig
      version: 0.2.dev0
      platforms: '["unix", "linux", "osx", "cygwin", "win32"]'
      summary: 'iniconfig: brain-dead simple config-ini parsing'
      description: "iniconfig: brain-dead simple parsing of ini files\n=======================================================\n\
        \niniconfig is a small and simple INI-file parser module\nhaving a unique\
        \ set of features:\n\n* tested against Python2.4 across to Python3.2, Jython,\
        \ PyPy\n* maintains order of sections and entries\n* supports multi-line values\
        \ with or without line-continuations\n* supports \"#\" comments everywhere\n\
        * raises errors with proper line-numbers\n* no bells and whistles like automatic\
        \ substitutions\n* iniconfig raises an Error if two sections have the same\
        \ name.\n\nIf you encounter issues or have feature wishes please report them\
        \ to:\n\n    http://bitbucket.org/RonnyPfannschmidt/iniconfig/issues\n\nBasic\
        \ Example\n===================================\n\nIf you have an ini file\
        \ like this::\n\n    # content of example.ini\n    [section1] # comment\n\
        \    name1=value1  # comment\n    name1b=value1,value2  # comment\n\n    [section2]\n\
        \    name2=\n        line1\n        line2\n\nthen you can do::\n \n    >>>\
        \ import iniconfig\n    >>> ini = iniconfig.IniConfig(\"example.ini\")\n \
        \   >>> ini['section1']['name1'] # raises KeyError if not exists\n    'value1'\n\
        \    >>> ini.get('section1', 'name1b', [], lambda x: x.split(\",\"))\n   \
        \ ['value1', 'value2']\n    >>> ini.get('section1', 'notexist', [], lambda\
        \ x: x.split(\",\"))\n    []\n    >>> [x.name for x in list(ini)]\n    ['section1',\
        \ 'section2']\n    >>> list(list(ini)[0].items())\n    [('name1', 'value1'),\
        \ ('name1b', 'value1,value2')]\n    >>> 'section1' in ini\n    True\n    >>>\
        \ 'inexistendsection' in ini\n    False"
      home_page: http://bitbucket.org/RonnyPfannschmidt/inipkg
      author: Ronny Pfannschmidt, Holger Krekel
      author_email: Ronny.Pfannschmidt@gmx.de, holger.krekel@gmail.com
      license: MIT License
  - file: iniconfig/iniconfig-1.0.1.tar.gz
    attributes:
      metadata_version: '1.1'
      name: iniconfig
      version: 1.0.1
      platforms: '["unix", "linux", "osx", "cygwin", "win32"]'
      summary: 'iniconfig: brain-dead simple config-ini parsing'
      description: "iniconfig: brain-dead simple parsing of ini files\n=======================================================\n\
        \niniconfig is a small and simple INI-file parser module\nhaving a unique\
        \ set of features:\n\n* tested against Python2.4 across to Python3.2, Jython,\
        \ PyPy\n* maintains order of sections and entries\n* supports multi-line values\
        \ with or without line-continuations\n* supports \"#\" comments everywhere\n\
        * raises errors with proper line-numbers\n* no bells and whistles like automatic\
        \ substitutions\n* iniconfig raises an Error if two sections have the same\
        \ name.\n\nIf you encounter issues or have feature wishes please report them\
        \ to:\n\n    http://github.com/RonnyPfannschmidt/iniconfig/issues\n\nBasic\
        \ Example\n===================================\n\nIf you have an ini file\
        \ like this::\n\n    # content of example.ini\n    [section1] # comment\n\
        \    name1=value1  # comment\n    name1b=value1,value2  # comment\n\n    [section2]\n\
        \    name2=\n        line1\n        line2\n\nthen you can do::\n\n    >>>\
        \ import iniconfig\n    >>> ini = iniconfig.IniConfig(\"example.ini\")\n \
        \   >>> ini['section1']['name1'] # raises KeyError if not exists\n    'value1'\n\
        \    >>> ini.get('section1', 'name1b', [], lambda x: x.split(\",\"))\n   \
        \ ['value1', 'value2']\n    >>> ini.get('section1', 'notexist', [], lambda\
        \ x: x.split(\",\"))\n    []\n    >>> [x.name for x in list(ini)]\n    ['section1',\
        \ 'section2']\n    >>> list(list(ini)[0].items())\n    [('name1', 'value1'),\
        \ ('name1b', 'value1,value2')]\n    >>> 'section1' in ini\n    True\n    >>>\
        \ 'inexistendsection' in ini\n    False"
      home_page: http://github.com/RonnyPfannschmidt/iniconfig
      author: Ronny Pfannschmidt, Holger Krekel
      author_email: opensource@ronnypfannschmidt.de, holger.krekel@gmail.com
      license: MIT License
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Operating
        System :: Microsoft :: Windows", "Operating System :: MacOS :: MacOS X", "Topic
        :: Software Development :: Libraries", "Topic :: Utilities", "Programming
        Language :: Python", "Programming Language :: Python :: 2", "Programming Language
        :: Python :: 3"]'
  - file: iniconfig/iniconfig-1.1.1-py2.py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: iniconfig
      version: 1.1.1
      platforms: '["unix", "linux", "osx", "cygwin", "win32"]'
      summary: 'iniconfig: brain-dead simple config-ini parsing'
      home_page: http://github.com/RonnyPfannschmidt/iniconfig
      author: Ronny Pfannschmidt, Holger Krekel
      author_email: opensource@ronnypfannschmidt.de, holger.krekel@gmail.com
      license: MIT License
      classifiers: '["Development Status :: 4 - Beta", "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Operating
        System :: Microsoft :: Windows", "Operating System :: MacOS :: MacOS X", "Topic
        :: Software Development :: Libraries", "Topic :: Utilities", "Programming
        Language :: Python", "Programming Language :: Python :: 2", "Programming Language
        :: Python :: 3"]'
      description: "iniconfig: brain-dead simple parsing of ini files\n=======================================================\n\
        \niniconfig is a small and simple INI-file parser module\nhaving a unique\
        \ set of features:\n\n* tested against Python2.4 across to Python3.2, Jython,\
        \ PyPy\n* maintains order of sections and entries\n* supports multi-line values\
        \ with or without line-continuations\n* supports \"#\" comments everywhere\n\
        * raises errors with proper line-numbers\n* no bells and whistles like automatic\
        \ substitutions\n* iniconfig raises an Error if two sections have the same\
        \ name.\n\nIf you encounter issues or have feature wishes please report them\
        \ to:\n\n    http://github.com/RonnyPfannschmidt/iniconfig/issues\n\nBasic\
        \ Example\n===================================\n\nIf you have an ini file\
        \ like this::\n\n    # content of example.ini\n    [section1] # comment\n\
        \    name1=value1  # comment\n    name1b=value1,value2  # comment\n\n    [section2]\n\
        \    name2=\n        line1\n        line2\n\nthen you can do::\n\n    >>>\
        \ import iniconfig\n    >>> ini = iniconfig.IniConfig(\"example.ini\")\n \
        \   >>> ini['section1']['name1'] # raises KeyError if not exists\n    'value1'\n\
        \    >>> ini.get('section1', 'name1b', [], lambda x: x.split(\",\"))\n   \
        \ ['value1', 'value2']\n    >>> ini.get('section1', 'notexist', [], lambda\
        \ x: x.split(\",\"))\n    []\n    >>> [x.name for x in list(ini)]\n    ['section1',\
        \ 'section2']\n    >>> list(list(ini)[0].items())\n    [('name1', 'value1'),\
        \ ('name1b', 'value1,value2')]\n    >>> 'section1' in ini\n    True\n    >>>\
        \ 'inexistendsection' in ini\n    False\n\n\n"
  - file: vimetronome/vimetronome-0.1.0-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: vimetronome
      version: 0.1.0
      summary: Visual metronome
      author: d10n
      author_email: d10n@redhat.com
      classifiers: '["Programming Language :: Python :: 3", "Programming Language
        :: Python :: 3.10", "Programming Language :: Python :: 3.11"]'
      requires_python: '>=3.10,<4.0'
      requires_dist: '["colored (>=1.4.4,<2.0.0)", "docopt (>=0.6.2,<0.7.0)", "schema
        (>=0.7.5,<0.8.0)"]'
      description_content_type: text/markdown
      description: "# vimetronome\n\nvimetronome blinks a cursor at the given rate\
        \ in Beats Per Minute\n\nUsage:\n\n    vimetronome <bpm>\n\n## Running from\
        \ source\n\n1. `poetry install`\n2. ```\n   poetry shell\n   vimetronome 80\n\
        \   ```\n   -or-\n   ```\n   poetry run vimetronome 80\n   ```\n\n\n\n"
  - file: vimetronome/vimetronome-0.1.0.tar.gz
    attributes:
      metadata_version: '2.1'
      name: vimetronome
      version: 0.1.0
      summary: Visual metronome
      author: d10n
      author_email: d10n@redhat.com
      classifiers: '["Programming Language :: Python :: 3", "Programming Language
        :: Python :: 3.10", "Programming Language :: Python :: 3.11"]'
      requires_python: '>=3.10,<4.0'
      requires_dist: '["colored (>=1.4.4,<2.0.0)", "docopt (>=0.6.2,<0.7.0)", "schema
        (>=0.7.5,<0.8.0)"]'
      description_content_type: text/markdown
      description: "# vimetronome\n\nvimetronome blinks a cursor at the given rate\
        \ in Beats Per Minute\n\nUsage:\n\n    vimetronome <bpm>\n\n## Running from\
        \ source\n\n1. `poetry install`\n2. ```\n   poetry shell\n   vimetronome 80\n\
        \   ```\n   -or-\n   ```\n   poetry run vimetronome 80\n   ```\n\n\n\n"
  - file: vimetronome/vimetronome-0.1.1-py3-none-any.whl
    attributes:
      metadata_version: '2.1'
      name: vimetronome
      version: 0.1.1
      summary: Visual metronome
      author: d10n
      author_email: d10n@redhat.com
      classifiers: '["Programming Language :: Python :: 3", "Programming Language
        :: Python :: 3.10", "Programming Language :: Python :: 3.11"]'
      requires_python: '>=3.10,<4.0'
      requires_dist: '["colored (>=1.4.4,<2.0.0)", "docopt (>=0.6.2,<0.7.0)", "schema
        (>=0.7.5,<0.8.0)"]'
      description_content_type: text/markdown
      description: "# vimetronome\n\nvimetronome blinks a cursor at the given rate\
        \ in Beats Per Minute\n\nUsage:\n\n    vimetronome <bpm>\n\n## Running from\
        \ source\n\n1. `poetry install`\n2. ```\n   poetry shell\n   vimetronome 80\n\
        \   ```\n   -or-\n   ```\n   poetry run vimetronome 80\n   ```\n\n\n\n"
  - file: vimetronome/vimetronome-0.1.1.tar.gz
    attributes:
      metadata_version: '2.1'
      name: vimetronome
      version: 0.1.1
      summary: Visual metronome
      author: d10n
      author_email: d10n@redhat.com
      classifiers: '["Programming Language :: Python :: 3", "Programming Language
        :: Python :: 3.10", "Programming Language :: Python :: 3.11"]'
      requires_python: '>=3.10,<4.0'
      requires_dist: '["colored (>=1.4.4,<2.0.0)", "docopt (>=0.6.2,<0.7.0)", "schema
        (>=0.7.5,<0.8.0)"]'
      description_content_type: text/markdown
      description: "# vimetronome\n\nvimetronome blinks a cursor at the given rate\
        \ in Beats Per Minute\n\nUsage:\n\n    vimetronome <bpm>\n\n## Running from\
        \ source\n\n1. `poetry install`\n2. ```\n   poetry shell\n   vimetronome 80\n\
        \   ```\n   -or-\n   ```\n   poetry run vimetronome 80\n   ```\n\n\n\n"

